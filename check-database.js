const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function checkDatabase() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (PostgreSQL)...\n')

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    await prisma.$queryRaw`SELECT 1`
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    console.log(`üåê DATABASE_URL: ${process.env.DATABASE_URL || '–Ω–µ –∑–∞–¥–∞–Ω'}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã/—Å–∞–ª–æ–Ω—ã
    const teams = await prisma.team.findMany({
      include: {
        _count: { select: { users: true, masters: true, services: true, bookings: true } },
      },
      orderBy: { createdAt: 'desc' },
      take: 5,
    })
    console.log(`\nüè¢ –ö–æ–º–∞–Ω–¥—ã/—Å–∞–ª–æ–Ω—ã (–ø–µ—Ä–≤—ã–µ ${teams.length}):`)
    for (const team of teams) {
      console.log(`  - ${team.name} (teamNumber: ${team.teamNumber}, slug: ${team.slug})`)
      console.log(`    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${team._count.users}, –ú–∞—Å—Ç–µ—Ä–∞: ${team._count.masters}, –£—Å–ª—É–≥–∏: ${team._count.services}, –ë—Ä–æ–Ω–∏: ${team._count.bookings}`)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersCount = await prisma.user.count()
    console.log(`\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${usersCount}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤
    const mastersCount = await prisma.master.count()
    console.log(`üë®‚Äçüíº –ú–∞—Å—Ç–µ—Ä–∞: ${mastersCount}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª—É–≥–∏
    const servicesCount = await prisma.service.count()
    console.log(`üíá‚Äç‚ôÄÔ∏è –£—Å–ª—É–≥–∏: ${servicesCount}`)

    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã:', error?.message || error)
    process.exitCode = 1
  } finally {
    await prisma.$disconnect()
  }
}

checkDatabase()
