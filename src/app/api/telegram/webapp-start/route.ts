import { NextRequest, NextResponse } from 'next/server'
import crypto from 'crypto'
import { prisma } from '@/lib/prisma'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö Telegram WebApp
async function validateTelegramWebAppData(initData: string, teamSlug: string): Promise<boolean> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–º–∞–Ω–¥—ã
    const team = await prisma.team.findFirst({
      where: { 
        OR: [
          { slug: teamSlug },
          { bookingSlug: teamSlug }
        ]
      },
      select: { telegramBotToken: true }
    })

    if (!team?.telegramBotToken) {
      console.log('‚ùå Telegram bot token not configured for team:', teamSlug)
      return false
    }

    const urlParams = new URLSearchParams(initData)
    const hash = urlParams.get('hash')
    urlParams.delete('hash')
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const dataCheckString = Array.from(urlParams.entries())
      .sort(([a], [b]) => a.localeCompare(b))
      .map(([key, value]) => `${key}=${value}`)
      .join('\n')
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    const secretKey = crypto.createHmac('sha256', 'WebAppData').update(team.telegramBotToken).digest()
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à
    const calculatedHash = crypto.createHmac('sha256', secretKey).update(dataCheckString).digest('hex')
    
    return calculatedHash === hash
  } catch (error) {
    console.error('Error validating Telegram data:', error)
    return false
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { user, startParam, platform, version, initData, url, timestamp } = body
    
    console.log('üöÄ TELEGRAM WEBAPP START:', {
      timestamp,
      user: user ? {
        id: user.id,
        first_name: user.first_name,
        last_name: user.last_name,
        username: user.username,
        language_code: user.language_code,
        is_premium: user.is_premium
      } : null,
      startParam,
      platform,
      version,
      url,
      ip: request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown'
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ initData –ø–µ—Ä–µ–¥–∞–Ω)
    let isValid = false
    if (initData && salonId) {
      isValid = await validateTelegramWebAppData(initData, salonId)
      console.log('üîê Data validation result:', isValid)
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º salon ID –∏–∑ URL –∏–ª–∏ startParam
    let salonId = null
    if (url) {
      const urlMatch = url.match(/\/book\/([^\/\?]+)/)
      if (urlMatch) {
        salonId = urlMatch[1]
        console.log('üè™ Salon ID extracted from URL:', salonId)
      }
    }
    
    if (startParam) {
      console.log('üîó Start param analysis:', startParam)
      // –ú–æ–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: salon_first, master_123, etc.
    }
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    // await prisma.telegramWebAppSession.create({ ... })
    
    return NextResponse.json({ 
      success: true,
      received_at: new Date().toISOString(),
      data_valid: isValid,
      salon_id: salonId,
      user_detected: !!user
    })
    
  } catch (error) {
    console.error('‚ùå Error processing Telegram WebApp start:', error)
    return NextResponse.json(
      { error: 'Failed to process start data' },
      { status: 500 }
    )
  }
}