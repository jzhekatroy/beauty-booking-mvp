'use client'

import React, { useState } from 'react'
import { ClientInfo, BookingData } from '@/types/booking'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { 
  User, Phone, Mail, MessageSquare, Calendar, Clock, 
  DollarSign, Check, ChevronDown, ChevronUp 
} from 'lucide-react'
import { cn } from '@/lib/utils'
import { toE164 } from '@/lib/phone'
import { useTelegramWebApp } from '@/hooks/useTelegramWebApp'

interface EnhancedClientInfoAndConfirmationProps {
  bookingData: BookingData;
  onClientInfoChange: (info: ClientInfo) => void;
  onBookingConfirmed: () => void;
  className?: string;
}

export function EnhancedClientInfoAndConfirmation({
  bookingData,
  onClientInfoChange,
  onBookingConfirmed,
  className
}: EnhancedClientInfoAndConfirmationProps) {
  const [errors, setErrors] = useState<Partial<ClientInfo>>({})
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [showBookingSummary, setShowBookingSummary] = useState(true)
  const [isRequestingPhone, setIsRequestingPhone] = useState(false)
  const telegramWebApp = useTelegramWebApp()

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram WebApp (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ WebApp –¥–æ—Å—Ç—É–ø–µ–Ω)
  React.useEffect(() => {
    if (telegramWebApp.webApp && telegramWebApp.user && !bookingData.clientInfo.name) {
      const firstName = telegramWebApp.user.first_name || ''
      const lastName = telegramWebApp.user.last_name || ''
      const fullName = `${firstName} ${lastName}`.trim()
      
      if (fullName) {
        onClientInfoChange({
          ...bookingData.clientInfo,
          name: fullName
        })
      }
    }
  }, [telegramWebApp.webApp, telegramWebApp.user, bookingData.clientInfo.name, onClientInfoChange])

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è WebApp
  React.useEffect(() => {
    if (telegramWebApp.webApp && !bookingData.clientInfo.phone && !isRequestingPhone) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª —Ñ–æ—Ä–º—É
      const timer = setTimeout(() => {
        if (telegramWebApp.webApp && !bookingData.clientInfo.phone) {
          console.log('üì± WebApp detected, requesting phone number...')
          requestPhoneNumber()
        }
      }, 1000)
      
      return () => clearTimeout(timer)
    }
  }, [telegramWebApp.webApp, bookingData.clientInfo.phone, isRequestingPhone])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ Telegram WebApp
  const requestPhoneNumber = async () => {
    if (!telegramWebApp.webApp) {
      console.error('‚ùå Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
      alert('Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
      return
    }

    console.log('üì± ===== –ù–ê–ß–ê–õ–û –ó–ê–ü–†–û–°–ê –ù–û–ú–ï–†–ê –¢–ï–õ–ï–§–û–ù–ê =====')
    console.log('üì± WebApp object:', telegramWebApp.webApp)
    console.log('üì± requestContact method:', typeof telegramWebApp.webApp.requestContact)
    console.log('üì± onEvent method:', typeof telegramWebApp.webApp.onEvent)
    console.log('üì± offEvent method:', typeof telegramWebApp.webApp.offEvent)
    console.log('üì± WebApp version:', telegramWebApp.webApp.version)
    console.log('üì± WebApp platform:', telegramWebApp.webApp.platform)
    console.log('üì± User agent:', navigator.userAgent)
    console.log('üì± Current URL:', window.location.href)
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    try {
      await fetch('/api/telegram/logs', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: 'PHONE_REQUEST_START',
          data: {
            webAppAvailable: !!telegramWebApp.webApp,
            requestContactAvailable: typeof telegramWebApp.webApp?.requestContact === 'function',
            onEventAvailable: typeof telegramWebApp.webApp?.onEvent === 'function',
            offEventAvailable: typeof telegramWebApp.webApp?.offEvent === 'function',
            webAppVersion: telegramWebApp.webApp?.version,
            webAppPlatform: telegramWebApp.webApp?.platform,
            userAgent: navigator.userAgent,
            url: window.location.href,
            timestamp: new Date().toISOString()
          }
        })
      })
    } catch (e) {
      console.error('‚ùå Failed to send debug log:', e)
    }

    setIsRequestingPhone(true)
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –º–µ—Ç–æ–¥ requestContact
      if (typeof telegramWebApp.webApp.requestContact !== 'function') {
        console.log('‚ùå requestContact method not available, trying requestWriteAccess')
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞–ø–∏—Å–∏
        if (typeof telegramWebApp.webApp.requestWriteAccess === 'function') {
          console.log('üì± Trying requestWriteAccess as fallback...')
          telegramWebApp.webApp.requestWriteAccess((granted: boolean) => {
            console.log('üì± requestWriteAccess result:', granted)
            setIsRequestingPhone(false)
            if (granted) {
              console.log('‚úÖ Write access granted, but phone number still needs manual input')
              if (telegramWebApp.webApp) {
                alert('–î–æ—Å—Ç—É–ø –∫ –∑–∞–ø–∏—Å–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –Ω–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é')
              }
            } else {
              console.log('‚ùå Write access denied')
              if (telegramWebApp.webApp) {
                alert('–î–æ—Å—Ç—É–ø –∫ –∑–∞–ø–∏—Å–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä—É—á–Ω—É—é.')
              }
            }
          })
          return
        } else {
          console.log('‚ùå No fallback methods available')
          if (telegramWebApp.webApp) {
            alert('–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é.')
          }
          setIsRequestingPhone(false)
          return
        }
      }

      console.log('‚úÖ requestContact method available, proceeding with contact request...')

      // –í Telegram WebApp requestContact —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ-–¥—Ä—É–≥–æ–º—É!
      // –û–Ω –ù–ï –ø—Ä–∏–Ω–∏–º–∞–µ—Ç callback, –∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
      // –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ 'contactRequested'
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
      const handleContactRequested = (contact: any) => {
        console.log('üì± ===== –ö–û–ù–¢–ê–ö–¢ –ü–û–õ–£–ß–ï–ù –ß–ï–†–ï–ó –°–û–ë–´–¢–ò–ï =====')
        console.log('üì± Contact data:', contact)
        console.log('üì± Contact type:', typeof contact)
        console.log('üì± Contact keys:', contact ? Object.keys(contact) : 'null')
        console.log('üì± Phone number:', contact?.phone_number)
        
        setIsRequestingPhone(false)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–Ω—Ç–∞–∫—Ç–∞
        let phoneNumber = null
        
        if (contact?.phone_number) {
          phoneNumber = contact.phone_number
        } else if (contact?.contact?.phone_number) {
          phoneNumber = contact.contact.phone_number
        } else if (contact?.responseUnsafe?.contact?.phone_number) {
          phoneNumber = contact.responseUnsafe.contact.phone_number
        }
        
        if (phoneNumber) {
          console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ Telegram:', contact)
          console.log('‚úÖ Phone number extracted:', phoneNumber)
          onClientInfoChange({
            ...bookingData.clientInfo,
            phone: phoneNumber
          })
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –ª–æ–≥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
          fetch('/api/telegram/logs', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              message: 'PHONE_REQUEST_SUCCESS',
              data: { 
                contact, 
                phone: phoneNumber,
                timestamp: new Date().toISOString() 
              }
            })
          }).catch(e => console.error('Failed to send success log:', e))
          
          // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
          telegramWebApp.webApp?.offEvent('contactRequested', handleContactRequested)
          telegramWebApp.webApp?.offEvent('contact_requested', handleContactRequested)
          telegramWebApp.webApp?.offEvent('contact', handleContactRequested)
        } else {
          console.log('‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', contact)
          if (telegramWebApp.webApp) {
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.')
          }
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ–± –æ—à–∏–±–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
          fetch('/api/telegram/logs', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              message: 'PHONE_REQUEST_FAILED',
              data: { contact, timestamp: new Date().toISOString() }
            })
          }).catch(e => console.error('Failed to send error log:', e))
        }
      }

      console.log('üì± Setting up event listener for contactRequested...')
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
      telegramWebApp.webApp.onEvent('contactRequested', handleContactRequested)
      console.log('‚úÖ Event listener attached')
      
      // –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
      telegramWebApp.webApp.onEvent('contact_requested', handleContactRequested)
      telegramWebApp.webApp.onEvent('contact', handleContactRequested)
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ)
      console.log('üì± Calling requestContact()...')
      telegramWebApp.webApp.requestContact()
      console.log('‚úÖ requestContact() called, waiting for user action...')
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç
      const timeoutId = setTimeout(() => {
        console.log('‚è∞ ===== –¢–ê–ô–ú–ê–£–¢ –û–ñ–ò–î–ê–ù–ò–Ø –ö–û–ù–¢–ê–ö–¢–ê =====')
        setIsRequestingPhone(false)
        telegramWebApp.webApp?.offEvent('contactRequested', handleContactRequested)
        telegramWebApp.webApp?.offEvent('contact_requested', handleContactRequested)
        telegramWebApp.webApp?.offEvent('contact', handleContactRequested)
        console.log('‚è∞ Timeout waiting for contact - user did not send contact')
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ —Ç–∞–π–º–∞—É—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        fetch('/api/telegram/logs', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            message: 'PHONE_REQUEST_TIMEOUT',
            data: { timestamp: new Date().toISOString() }
          })
        }).catch(e => console.error('Failed to send timeout log:', e))
      }, 30000) // 30 —Å–µ–∫—É–Ω–¥
      
      console.log('‚è∞ Timeout set for 30 seconds')
      
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
      const originalHandler = handleContactRequested
      const wrappedHandler = (contact: any) => {
        console.log('üì± Wrapped handler called, clearing timeout...')
        clearTimeout(timeoutId)
        originalHandler(contact)
      }
      
      // –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –æ–±–µ—Ä–Ω—É—Ç—ã–µ
      telegramWebApp.webApp.offEvent('contactRequested', handleContactRequested)
      telegramWebApp.webApp.offEvent('contact_requested', handleContactRequested)
      telegramWebApp.webApp.offEvent('contact', handleContactRequested)
      
      telegramWebApp.webApp.onEvent('contactRequested', wrappedHandler)
      telegramWebApp.webApp.onEvent('contact_requested', wrappedHandler)
      telegramWebApp.webApp.onEvent('contact', wrappedHandler)
      console.log('‚úÖ Wrapped handlers attached')
      
    } catch (error: any) {
      console.error('‚ùå ===== –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–†–û–°–ï –ù–û–ú–ï–†–ê –¢–ï–õ–ï–§–û–ù–ê =====')
      console.error('‚ùå Error details:', error)
      console.error('‚ùå Error message:', error?.message)
      console.error('‚ùå Error stack:', error?.stack)
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º alert —Ç–æ–ª—å–∫–æ –¥–ª—è WebApp, –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
      if (telegramWebApp.webApp) {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é.')
      }
      setIsRequestingPhone(false)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ–± –æ—à–∏–±–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      fetch('/api/telegram/logs', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: 'PHONE_REQUEST_ERROR',
          data: { 
            error: error.message, 
            stack: error.stack,
            timestamp: new Date().toISOString() 
          }
        })
      }).catch(e => console.error('Failed to send error log:', e))
    }
  }

  const validateForm = (): boolean => {
    const newErrors: Partial<ClientInfo> = {}

    if (!bookingData.clientInfo.name.trim()) {
      newErrors.name = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
    }

    if (!bookingData.clientInfo.phone.trim()) {
      newErrors.phone = '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
    } else if (!/^[\+]?[1-9][\d]{10,14}$/.test(bookingData.clientInfo.phone.replace(/\s/g, ''))) {
      newErrors.phone = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
    }

    if (bookingData.clientInfo.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(bookingData.clientInfo.email)) {
      newErrors.email = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleInputChange = (field: keyof ClientInfo, value: string) => {
    onClientInfoChange({
      ...bookingData.clientInfo,
      [field]: value
    })

    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: undefined
      }))
    }
  }

  const handleConfirm = async () => {
    if (!validateForm()) {
      return
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!bookingData.timeSlot?.time) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏')
      return
    }

    setIsSubmitting(true)
    try {
      // –ù–∞ —Å–µ—Ä–≤–µ—Ä –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Ä–µ–º—è –°–ê–õ–û–ù–ê, –∏–Ω–∞—á–µ –ø–æ—è–≤–∏—Ç—Å—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç
      const salonTime = bookingData.timeSlot?.timezoneInfo?.salonTime || bookingData.timeSlot!.time
      const startTime = `${bookingData.date}T${salonTime}:00`
      console.log('üîç DEBUG startTime (salon) being sent:', startTime)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ E.164 –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      const { e164: phoneE164, error: phoneErr } = toE164(bookingData.clientInfo.phone, 'RU')
      if (phoneErr || !phoneE164) {
        setErrors(prev => ({ ...prev, phone: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' }))
        setIsSubmitting(false)
        return
      }


      const response = await fetch('/api/bookings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          teamSlug: window.location.pathname.split('/')[2], // –ò–∑–≤–ª–µ–∫–∞–µ–º slug –∏–∑ URL
          serviceIds: bookingData.services.map(s => s.id),
          masterId: bookingData.master?.id,
          startTime: startTime,
          clientData: {
            name: bookingData.clientInfo.name,
            phone: phoneE164,
            email: bookingData.clientInfo.email,
            notes: bookingData.clientInfo.notes,
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Telegram WebApp
            telegramId: telegramWebApp.user?.id?.toString(),
            telegramUsername: telegramWebApp.user?.username,
            telegramFirstName: telegramWebApp.user?.first_name,
            telegramLastName: telegramWebApp.user?.last_name,
            telegramLanguageCode: telegramWebApp.user?.language_code,
          }
        })
      })

      if (response.ok) {
        onBookingConfirmed()
      } else {
        const errorData = await response.json()
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error)
      alert(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    } finally {
      setIsSubmitting(false)
    }
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleDateString('ru-RU', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  }

  const formatDuration = (minutes: number) => {
    if (minutes < 60) return `${minutes} –º–∏–Ω`
    const hours = Math.floor(minutes / 60)
    const remainingMinutes = minutes % 60
    if (remainingMinutes === 0) return `${hours} —á`
    return `${hours} —á ${remainingMinutes} –º–∏–Ω`
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  console.log('üîç EnhancedClientInfoAndConfirmation render:', {
    timeSlot: bookingData.timeSlot,
    timeSlotTime: bookingData.timeSlot?.time,
    fullBookingData: bookingData
  })

  return (
    <div className={cn("space-y-6", className)}>
      {/* –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞ */}
      <Card>
        <CardHeader 
          className="cursor-pointer"
          onClick={() => setShowBookingSummary(!showBookingSummary)}
        >
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Calendar className="w-5 h-5" />
              –í–∞—à –∑–∞–∫–∞–∑
            </div>
            {showBookingSummary ? <ChevronUp className="w-5 h-5" /> : <ChevronDown className="w-5 h-5" />}
          </CardTitle>
        </CardHeader>
        {showBookingSummary && (
          <CardContent className="space-y-4">
            {/* –£—Å–ª—É–≥–∏ */}
            <div>
              <p className="text-sm font-medium text-gray-700 mb-2">–£—Å–ª—É–≥–∏:</p>
              <div className="space-y-1">
                {bookingData.services.map(service => (
                  <div key={service.id} className="flex justify-between text-sm">
                    <span>{service.name}</span>
                    <span>{service.price} ‚ÇΩ</span>
                  </div>
                ))}
              </div>
            </div>

            {/* –î–∞—Ç–∞, –≤—Ä–µ–º—è, –º–∞—Å—Ç–µ—Ä */}
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm">
              <div>
                <p className="font-medium text-gray-700">–î–∞—Ç–∞:</p>
                <p>{formatDate(bookingData.date)}</p>
              </div>
              <div>
                <p className="font-medium text-gray-700">–í—Ä–µ–º—è:</p>
                <p>{bookingData.timeSlot?.time || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}</p>
              </div>
              {bookingData.master && (
                <div className="sm:col-span-2">
                  <p className="font-medium text-gray-700 mb-2">–ú–∞—Å—Ç–µ—Ä:</p>
                  <div className="flex items-center gap-3">
                    {bookingData.master.photoUrl ? (
                      <img
                        src={bookingData.master.photoUrl}
                        alt={`${bookingData.master.firstName} ${bookingData.master.lastName}`}
                        className="w-12 h-12 rounded-full object-cover border-2 border-gray-200"
                      />
                    ) : (
                      <div className="w-12 h-12 rounded-full bg-gray-200 flex items-center justify-center border-2 border-gray-200">
                        <User className="w-6 h-6 text-gray-400" />
                      </div>
                    )}
                    <div>
                      <p className="font-medium">{bookingData.master.firstName} {bookingData.master.lastName}</p>
                      {bookingData.master.description && (
                        <p className="text-xs text-gray-600">{bookingData.master.description}</p>
                      )}
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* –ò—Ç–æ–≥–æ */}
            <div className="border-t pt-3 flex justify-between items-center font-semibold">
              <span>–ò—Ç–æ–≥–æ:</span>
              <span className="text-[#00acf4]">{bookingData.totalPrice} ‚ÇΩ</span>
            </div>
            <p className="text-xs text-gray-600">
              –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {formatDuration(bookingData.totalDuration)}
            </p>
          </CardContent>
        )}
      </Card>

      {/* –§–æ—Ä–º–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <User className="w-5 h-5" />
            –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {/* –ò–º—è */}
            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
                –í–∞—à–µ –∏–º—è *
              </label>
              <div className="relative">
                <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                <Input
                  id="name"
                  type="text"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                  value={bookingData.clientInfo.name}
                  onChange={(e) => handleInputChange('name', e.target.value)}
                  className={cn(
                    "pl-10",
                    errors.name ? 'border-red-500 focus:border-red-500' : ''
                  )}
                />
              </div>
              {errors.name && (
                <p className="text-red-500 text-sm mt-1">{errors.name}</p>
              )}
            </div>

            {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
            <div>
              <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-1">
                –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ *
              </label>
              <div className="flex gap-2">
                <div className="relative flex-1">
                  <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                  <Input
                    id="phone"
                    type="tel"
                    placeholder="+7 (999) 123-45-67"
                    value={bookingData.clientInfo.phone}
                    onChange={(e) => handleInputChange('phone', e.target.value)}
                    className={cn(
                      "pl-10",
                      errors.phone ? 'border-red-500 focus:border-red-500' : ''
                    )}
                  />
                </div>
              </div>
              {errors.phone && (
                <p className="text-red-500 text-sm mt-1">{errors.phone}</p>
              )}
            </div>

            {/* Email */}
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                Email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
              </label>
              <div className="relative">
                <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                <Input
                  id="email"
                  type="email"
                  placeholder="example@email.com"
                  value={bookingData.clientInfo.email || ''}
                  onChange={(e) => handleInputChange('email', e.target.value)}
                  className={cn(
                    "pl-10",
                    errors.email ? 'border-red-500 focus:border-red-500' : ''
                  )}
                />
              </div>
              {errors.email && (
                <p className="text-red-500 text-sm mt-1">{errors.email}</p>
              )}
            </div>

            {/* –ü—Ä–∏–º–µ—á–∞–Ω–∏—è */}
            <div>
              <label htmlFor="notes" className="block text-sm font-medium text-gray-700 mb-1">
                –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
              </label>
              <div className="relative">
                <MessageSquare className="absolute left-3 top-3 text-gray-400 w-5 h-5" />
                <textarea
                  id="notes"
                  placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è..."
                  value={bookingData.clientInfo.notes || ''}
                  onChange={(e) => handleInputChange('notes', e.target.value)}
                  rows={3}
                  className={cn(
                    "w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-[#00acf4] focus:border-transparent resize-none"
                  )}
                />
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è */}
            <Button
              onClick={handleConfirm}
              disabled={isSubmitting}
              className="w-full bg-green-600 hover:bg-green-700 text-white py-3 text-lg mt-6"
            >
              {isSubmitting ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å...
                </>
              ) : (
                <>
                  <Check className="w-5 h-5 mr-2" />
                  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å
                </>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
