const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function changePassword() {
  try {
    const email = process.argv[2];
    const newPassword = process.argv[3];
    
    console.log(`üîß –ú–µ–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è: ${email}`);
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { email },
      select: { id: true, email: true, role: true, firstName: true, lastName: true }
    });
    
    if (!user) {
      console.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
      process.exit(1);
    }
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${user.firstName} ${user.lastName} (${user.role})`);
    
    // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    const hashedPassword = bcrypt.hashSync(newPassword, 10);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    await prisma.user.update({
      where: { email },
      data: { password: hashedPassword }
    });
    
    console.log(`‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è ${email} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!`);
    console.log(`üîë –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:`);
    console.log(`   Email: ${email}`);
    console.log(`   –ü–∞—Ä–æ–ª—å: ${newPassword}`);
    console.log(`   URL: http://localhost:3000/login`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

changePassword();
