import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { generateBookingNumber } from '@/lib/auth'
import { BookingStatus } from '@prisma/client'
import jwt from 'jsonwebtoken'
import { utcToSalonTime, createDateInSalonTimezone } from '@/lib/timezone'
import { toE164 } from '@/lib/phone'

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const {
      teamSlug,
      serviceIds,
      masterId,
      startTime,
      clientData
    } = body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!teamSlug || !serviceIds || !masterId || !startTime || !clientData) {
      return NextResponse.json(
        { error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' },
        { status: 400 }
      )
    }

    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É –ø–æ slug
    const team = await prisma.team.findUnique({
      where: { slug: teamSlug }
    })

    if (!team) {
      return NextResponse.json(
        { error: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
        { status: 404 }
      )
    }

    if (team.status === 'DISABLED') {
      return NextResponse.json(
        { error: '–ö–æ–º–∞–Ω–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø–∏—Å–∏' },
        { status: 403 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
    const master = await prisma.master.findFirst({
      where: {
        id: masterId,
        teamId: team.id,
        isActive: true
      }
    })

    if (!master) {
      return NextResponse.json(
        { error: '–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' },
        { status: 404 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏
    const services = await prisma.service.findMany({
      where: {
        id: { in: serviceIds },
        teamId: team.id,
        isArchived: false
      }
    })

    if (services.length !== serviceIds.length) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —É—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' },
        { status: 404 }
      )
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const totalDuration = services.reduce((sum, service) => sum + service.duration, 0)
    const totalPrice = services.reduce((sum, service) => sum + Number(service.price), 0)

    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    console.log('üîç DEBUG startTime (salon string):', startTime)
    // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∫ –≤—Ä–µ–º—è –°–ê–õ–û–ù–ê, –∞ –Ω–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
    const [datePart, timePart] = startTime.split('T')
    const [year, month, day] = datePart.split('-').map(Number)
    const [hour, minute] = timePart.split(':').map(Number)
    
    if (!year || !month || !day || isNaN(hour) || isNaN(minute)) {
      return NextResponse.json(
        { error: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è: ${startTime}` },
        { status: 400 }
      )
    }
    
    // –°–æ–∑–¥–∞–µ–º UTC-–≤—Ä–µ–º—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–∞–ª–æ–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    const salonTimezone = team.timezone || 'Europe/Moscow'
    const utcStartDateTime = createDateInSalonTimezone(year, month, day, hour, minute, salonTimezone)
    const utcEndDateTime = new Date(utcStartDateTime.getTime() + totalDuration * 60 * 1000)
    
    console.log('üîç DEBUG utcStartDateTime:', utcStartDateTime)
    console.log('üîç DEBUG utcEndDateTime:', utcEndDateTime)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
    const conflictingBooking = await prisma.booking.findFirst({
      where: {
        masterId: masterId,
        status: { in: ['NEW', 'CONFIRMED'] },
        OR: [
          {
            startTime: { lte: utcStartDateTime },
            endTime: { gt: utcStartDateTime }
          },
          {
            startTime: { lt: utcEndDateTime },
            endTime: { gte: utcEndDateTime }
          },
          {
            startTime: { gte: utcStartDateTime },
            endTime: { lte: utcEndDateTime }
          }
        ]
      }
    })

    if (conflictingBooking) {
      return NextResponse.json(
        { error: '–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ' },
        { status: 409 }
      )
    }

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ (MVP: –ø–æ email/—Ç–µ–ª–µ—Ñ–æ–Ω—É + –∏–º—è –∏–∑ name)
    const fullName: string = (clientData.name || '').trim()
    let parsedFirstName: string | null = null
    let parsedLastName: string | null = null
    if (fullName) {
      const parts = fullName.split(/\s+/)
      parsedFirstName = parts[0] || null
      parsedLastName = parts.slice(1).join(' ') || null
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ E.164
    const { e164: phoneE164 } = toE164(clientData.phone || '', (team as any).countryCode || 'RU')

    // –ï—Å–ª–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º –ø–æ email/—Ç–µ–ª–µ—Ñ–æ–Ω—É, –ø–æ—Ç—Ä–µ–±—É–µ–º –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
    const emailTrim = (clientData.email || '').trim()

    let client = null as null | (typeof prisma.client extends { findFirst: any } ? any : never)
    if (clientData.email) {
      client = await prisma.client.findFirst({
        where: { email: clientData.email, teamId: team.id }
      })
    }
    if (!client && phoneE164) {
      client = await prisma.client.findFirst({
        where: { phone: phoneE164, teamId: team.id }
      })
    }

    if (!client) {
      if (!fullName) {
        return NextResponse.json({ error: '–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞' }, { status: 400 })
      }
      if (!phoneE164) {
        return NextResponse.json({ error: '–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞' }, { status: 400 })
      }
      const emailForCreate = emailTrim || `${String(phoneE164).replace('+','')}${String(team.id).slice(0,6)}@noemail.local`
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞ —Å–ª—É—á–∞–π –≥–æ–Ω–∫–∏ (P2002) ‚Äî –ø–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
      try {
        client = await prisma.client.create({
          data: {
            email: emailForCreate,
            phone: phoneE164,
            telegram: clientData.telegram,
            firstName: clientData.firstName ?? parsedFirstName,
            lastName: clientData.lastName ?? parsedLastName,
            address: clientData.address,
            teamId: team.id
          }
        })
      } catch (err: any) {
        // –ï—Å–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å email+teamId —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî –∑–Ω–∞—á–∏—Ç –∫–ª–∏–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å. –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ email/—Ç–µ–ª–µ—Ñ–æ–Ω—É
        if (err && err.code === 'P2002') {
          let existing = null as any
          existing = await prisma.client.findFirst({ where: { email: emailTrim, teamId: team.id } })
          if (!existing && phoneE164) {
            existing = await prisma.client.findFirst({ where: { phone: phoneE164, teamId: team.id } })
          }
          if (existing) {
            client = existing
          } else {
            throw err
          }
        } else {
          throw err
        }
      }
    } else if (((!client.firstName && parsedFirstName) || (!client.lastName && parsedLastName)) || (phoneE164 && client.phone !== phoneE164)) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –§–ò–û, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –∏–º—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
      client = await prisma.client.update({
        where: { id: client.id },
        data: {
          firstName: client.firstName || parsedFirstName,
          lastName: client.lastName || parsedLastName,
          phone: phoneE164 || client.phone
        }
      })
    }

    // –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞/–¥–µ–Ω—å (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–∞–ª–æ–Ω–∞)
    // SQLite —Ç–∏–ø—ã —É Prisma –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥—Ç—è–Ω—É—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –≤ —Ç–∏–ø–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º any –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const limit = (team as any).maxBookingsPerDayPerClient ?? 3
    const dayStartUtc = createDateInSalonTimezone(year, month, day, 0, 0, team.timezone || 'Europe/Moscow')
    const dayEndUtc = createDateInSalonTimezone(year, month, day, 23, 59, team.timezone || 'Europe/Moscow')
    const existingCount = await prisma.booking.count({
      where: {
        teamId: team.id,
        clientId: client.id,
        status: { in: ['NEW', 'CONFIRMED', 'COMPLETED', 'NO_SHOW'] },
        startTime: { gte: dayStartUtc, lte: dayEndUtc }
      }
    })
    if (existingCount >= limit) {
      return NextResponse.json(
        { error: `–õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –¥–µ–Ω—å: ${limit}. –£ –∫–ª–∏–µ–Ω—Ç–∞ —É–∂–µ ${existingCount} –∑–∞–ø–∏—Å–µ–π –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å.` },
        { status: 429 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å–ª—É–≥–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const hasServicesRequiringConfirmation = services.some(service => service.requireConfirmation)

    // –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const result = await prisma.$transaction(async (tx) => {
      // –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      const booking = await tx.booking.create({
        data: {
          bookingNumber: generateBookingNumber(),
          startTime: utcStartDateTime,
          endTime: utcEndDateTime,
          totalPrice: totalPrice,
          notes: clientData.notes,
          status: hasServicesRequiringConfirmation ? BookingStatus.NEW : BookingStatus.CONFIRMED,
          teamId: team.id,
          clientId: client.id,
          masterId: masterId
        }
      })

      // –°–≤—è–∑—ã–≤–∞–µ–º —Å —É—Å–ª—É–≥–∞–º–∏
      for (const service of services) {
        await tx.bookingService.create({
          data: {
            bookingId: booking.id,
            serviceId: service.id,
            price: service.price
          }
        })
      }

      // –°–æ–∑–¥–∞–µ–º –ª–æ–≥
      await tx.bookingLog.create({
        data: {
          bookingId: booking.id,
          action: hasServicesRequiringConfirmation ? 'NEW' : 'CONFIRMED',
          description: hasServicesRequiringConfirmation 
            ? '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ –≤–∏–¥–∂–µ—Ç –∑–∞–ø–∏—Å–∏ (—Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)'
            : '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ –≤–∏–¥–∂–µ—Ç –∑–∞–ø–∏—Å–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ)',
          teamId: team.id
        }
      })

      // –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (–∞–Ω–∞–ª–∏—Ç–∏–∫–∞)
      await (tx as any).clientEvent.create({
        data: {
          teamId: team.id,
          clientId: client.id,
          source: 'public',
          type: 'booking_created',
          metadata: {
            bookingId: booking.id,
            masterId,
            serviceIds,
            timezone: (team as any).timezone || 'Europe/Moscow',
            // –ì–æ—Ä–æ–¥ –ª—É—á—à–µ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ (Geolocation API) –∏–ª–∏ –ø–æ IP –Ω–∞ –±—ç–∫–µ —á–µ—Ä–µ–∑ GeoIP, –ø–æ–∫–∞ –ø–∏—à–µ–º tz
          },
          ip: request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || null,
          userAgent: request.headers.get('user-agent') || null
        }
      })

      return booking
    })

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    const fullBooking = await prisma.booking.findUnique({
      where: { id: result.id },
      include: {
        client: true,
        master: true,
        services: {
          include: { service: true }
        }
      }
    })

    return NextResponse.json({
      success: true,
      booking: {
        id: fullBooking!.id,
        bookingNumber: fullBooking!.bookingNumber,
        startTime: fullBooking!.startTime,
        endTime: fullBooking!.endTime,
        totalPrice: fullBooking!.totalPrice,
        status: fullBooking!.status,
        client: {
          firstName: fullBooking!.client.firstName,
          lastName: fullBooking!.client.lastName,
          email: fullBooking!.client.email
        },
        master: {
          firstName: fullBooking!.master.firstName,
          lastName: fullBooking!.master.lastName
        },
        services: fullBooking!.services.map(bs => ({
          name: bs.service.name,
          duration: bs.service.duration,
          price: bs.price
        }))
      }
    })

  } catch (error) {
    console.error('Booking creation error:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã
export async function GET(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
    const authHeader = request.headers.get('authorization')
    if (!authHeader) {
      return NextResponse.json({ error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' }, { status: 401 })
    }

    const token = authHeader.replace('Bearer ', '')
    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as { userId: string }

    const user = await prisma.user.findUnique({
      where: { id: decoded.userId },
      include: { team: true }
    })

    if (!user || !user.team) {
      return NextResponse.json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
    }

    if (user.role !== 'ADMIN' && user.role !== 'SUPER_ADMIN') {
      return NextResponse.json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' }, { status: 403 })
    }

    const { searchParams } = new URL(request.url)
    const masterId = searchParams.get('masterId')
    const date = searchParams.get('date')
    const status = searchParams.get('status')
    const clientId = searchParams.get('clientId')
    const from = searchParams.get('from')
    const to = searchParams.get('to')

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º teamId –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const teamId = user.teamId

    let whereClause: any = { teamId }

    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ —Å–ø–∏—Å–∫–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ CONFIRMED –∫–∞–∫ COMPLETED
    // –ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö CONFIRMED –≤ COMPLETED + –ª–æ–≥ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    const outdated = await prisma.booking.findMany({
      where: { teamId, status: 'CONFIRMED', endTime: { lt: new Date() } },
      select: { id: true, clientId: true }
    })
    if (outdated.length > 0) {
      await prisma.$transaction(async (tx) => {
        await tx.booking.updateMany({
          where: { teamId, status: 'CONFIRMED', endTime: { lt: new Date() } },
          data: { status: 'COMPLETED' }
        })
        for (const b of outdated) {
          await (tx as any).clientEvent.create({
            data: {
              teamId,
              clientId: b.clientId,
              source: 'system',
              type: 'booking_completed',
              metadata: { bookingId: b.id },
            }
          })
        }
      })
    }

    if (masterId) {
      whereClause.masterId = masterId
    }

    if (clientId) {
      whereClause.clientId = clientId
    }

    if (from || to) {
      const gte = from ? new Date(from) : undefined
      const lte = to ? new Date(to) : undefined
      whereClause.startTime = { ...(gte ? { gte } : {}), ...(lte ? { lte } : {}) }
    } else if (date) {
      const startOfDay = new Date(date)
      startOfDay.setHours(0, 0, 0, 0)
      const endOfDay = new Date(date)
      endOfDay.setHours(23, 59, 59, 999)
      whereClause.startTime = { gte: startOfDay, lte: endOfDay }
    }

    if (status) {
      whereClause.status = status
    }

    const bookings = await prisma.booking.findMany({
      where: whereClause,
      include: {
        client: true,
        master: true,
        services: {
          include: { service: true }
        }
      },
      orderBy: { startTime: 'asc' }
    })

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –∫–∞–∫ –µ—Å—Ç—å (UTC). –ö–ª–∏–µ–Ω—Ç —Å–∞–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤ TZ —Å–∞–ª–æ–Ω–∞
    return NextResponse.json({ bookings })

  } catch (error) {
    console.error('Get bookings error:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}