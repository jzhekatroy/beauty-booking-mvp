name: 🚀 Deploy to Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
    
    # Миграции запускаем на сервере (ниже), где есть .env с DATABASE_URL
      
    - name: 🔨 Build application
      run: npm run build
      
    - name: 🧪 Run tests (if any)
      run: npm test --if-present
      
    - name: 📥 Update code on server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          echo "🚀 Обновляем код на сервере..."
          
          # Переходим в директорию проекта
          cd /home/beautyapp/beauty-booking
          echo "📂 Текущая директория: $(pwd)"
          
          echo "📥 Получаем последние изменения из GitHub..."
          git fetch origin
          git reset --hard origin/main
          echo "✅ Код обновлен до коммита: $(git rev-parse --short HEAD)"

          echo "🧹 Чистим возможные дубли проекта (архивы/вложенные папки)..."
          [ -d beauty-booking-mvp ] && rm -rf beauty-booking-mvp || true

          echo "🛠️ Нормализуем docker-compose.yml (порт/healthcheck/DATABASE_URL для контейнера)..."
          sed -i 's|"3000:3000"|"127.0.0.1:3000:3000"|' docker-compose.yml || true
          sed -i 's|http://localhost:3000/api/health|http://127.0.0.1:3000/api/health|' docker-compose.yml || true
          sed -i 's|- DATABASE_URL=${DATABASE_URL}|- DATABASE_URL=postgresql://postgres:postgres@postgres:5432/beauty?schema=public|' docker-compose.yml || true
          
          echo "🐳 Поднимаем инфраструктуру Docker..."
          docker compose up -d postgres || true
          
          echo "🔨 Собираем Docker-образ приложения..."
          docker compose build --no-cache beauty-booking
          
          echo "🚀 Запускаем приложение через Docker..."
          docker compose up -d --remove-orphans beauty-booking
          
          echo "🗄️ Применяем миграции (в контейнере)..."
          # Внутри контейнера Postgres доступен по хосту "postgres"
          docker compose exec beauty-booking sh -lc 'export DATABASE_URL="postgresql://postgres:postgres@postgres:5432/beauty?schema=public"; npx prisma migrate deploy' || { echo "❌ Ошибка миграций"; exit 1; }
          
          echo "📊 Текущий статус сервисов:" && docker compose ps
          
    # Docker управляет перезапуском, отдельный шаг не требуется
          
    - name: ✅ Verify deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        timeout: 60s
        script: |
          echo "🔍 Быстрая проверка статуса деплоя..."
          
          cd /home/beautyapp/beauty-booking
          
          # Быстрая проверка health check
          echo "🔍 Проверяем health check..."
          if curl -f http://127.0.0.1:3000/api/health > /dev/null 2>&1; then
            echo "✅ Health check прошел успешно!"
            echo "🌐 Приложение доступно на http://test.2minutes.ru"
            echo "🎉 Деплой завершен успешно!"
          else
            echo "⚠️ Health check не прошел, но процесс запущен"
            echo "📋 Логи контейнера приложения:"
            docker compose logs --tail=80 beauty-booking || true
            echo "🔍 Возможно приложение еще загружается..."
          fi
          
    - name: 📊 Deployment status
      if: success()
      run: |
        echo "🎉 Deployment successful!"
        echo "🔗 Check: http://test.2minutes.ru"
        echo "👤 Login: salon@example.com / password123"
        
    - name: ❌ Deployment failed
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        echo "Check the logs above for details"
