const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function createSuperAdmin() {
  try {
    const email = process.argv[2] || 'melkiy63@yandex.ru';
    const password = process.argv[3] || 'rootpasswd';
    
    console.log(`üîß –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞: ${email}`);
    
    // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const systemTeam = await prisma.team.upsert({
      where: { teamNumber: 'B0000001' },
      update: {},
      create: {
        id: 'system-team-001',
        teamNumber: 'B0000001',
        name: '–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        slug: 'system',
        contactPerson: '–°—É–ø–µ—Ä –ê–¥–º–∏–Ω',
        email: 'admin@beauty-booking.com',
        masterLimit: 0,
      },
    });
    
    console.log(`‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${systemTeam.id}`);
    
    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = bcrypt.hashSync(password, 10);
    
    // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.upsert({
      where: { email },
      update: {
        password: hashedPassword,
        role: 'SUPER_ADMIN',
        teamId: systemTeam.id,
      },
      create: {
        id: `user-${Date.now()}`,
        email,
        password: hashedPassword,
        role: 'SUPER_ADMIN',
        firstName: 'Super',
        lastName: 'Admin',
        teamId: systemTeam.id,
      },
    });
    
    console.log(`‚úÖ –°—É–ø–µ—Ä–∞–¥–º–∏–Ω ${email} —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω`);
    console.log(`üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:`);
    console.log(`   Email: ${email}`);
    console.log(`   –ü–∞—Ä–æ–ª—å: ${password}`);
    console.log(`   URL: http://localhost:3000/login`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

createSuperAdmin();
