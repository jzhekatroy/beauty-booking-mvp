// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN // БОГ
  ADMIN // Администратор команды
  MASTER // Мастер
}

enum TeamStatus {
  ACTIVE
  DISABLED
}

enum BookingStatus {
  NEW // Новая (требует подтверждения)
  CONFIRMED // Подтверждена
  COMPLETED // Выполнена
  CANCELLED_BY_CLIENT // Отменена клиентом
  CANCELLED_BY_SALON // Отменена салоном
  NO_SHOW // Не пришел
}

enum ActionType {
  NEW
  CONFIRMED
  COMPLETED
  NO_SHOW
  CANCELLED_BY_CLIENT
  CANCELLED_BY_SALON
  UPDATED
}

enum ClientSource {
  TELEGRAM_WEBAPP
  PUBLIC_PAGE
  ADMIN_CREATED
}

enum ClientActionType {
  PAGE_VIEW
  SERVICE_SELECT
  BOOKING_CREATED
  BOOKING_CANCELLED
  BOOKING_RESCHEDULED
  PAYMENT_COMPLETED
}

enum NotificationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Команды (салоны)
model Team {
  id                         String     @id @default(cuid())
  teamNumber                 String     @unique // B0XXXXXXX
  name                       String
  slug                       String     @unique // для публичного URL
  bookingSlug                String? // кастомная ссылка для бронирования (если null, используется slug)
  contactPerson              String
  email                      String
  logoUrl                    String?
  status                     TeamStatus @default(ACTIVE)
  disabledReason             String?
  disabledAt                 DateTime?
  masterLimit                Int        @default(2)
  bookingStep                Int        @default(15) // шаг бронирования в минутах
  maxBookingsPerDayPerClient Int        @default(0) // лимит записей на клиента в день (0 = без ограничений)
  timezone                   String     @default("Europe/Moscow") // часовой пояс салона
  webhooksEnabled            Boolean    @default(true)
  fairMasterRotation         Boolean    @default(false) // Справедливое распределение мастеров
  ungroupedGroupName         String     @default("Основные услуги") // Название для услуг без группы
  privacyPolicyUrl           String?
  telegramBotToken           String? // токен Telegram бота для WebApp
  // Публичные настройки страницы записи
  publicPageTitle            String? // кастомное название салона для страницы записи
  publicPageDescription      String? // кастомное описание салона для страницы записи
  publicPageLogoUrl          String? // кастомный логотип для страницы записи
  
  // Публичные UX-настройки
  // publicServiceCardsWithPhotos Boolean @default(true)
  // publicTheme                  String  @default("light")
  // dailyBookingLimit            Int     @default(3) // лимит записей на клиента в день
  // notificationsEnabled         Boolean @default(true) // включить уведомления клиентам
  // reminderHours                Int     @default(24) // за сколько часов до записи отправлять напоминание
  
  createdAt                  DateTime   @default(now())
  updatedAt                  DateTime   @updatedAt

  // Связи
  users                User[]
  masters              Master[]
  services             Service[]
  serviceGroups        ServiceGroup[]
  bookings             Booking[]
  clientEvents         ClientEvent[]
  clients              Client[]
  bookingLogs          BookingLog[]
  teamLogs             TeamLog[]
  masterRotations      MasterRotation[]
  loginLogs            UserLoginLog[]
  notificationSettings NotificationSettings?
  telegramErrors       TelegramError[]
  clientActions        ClientAction[]

  @@map("teams")
}

// Пользователи системы
model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  role        UserRole
  firstName   String?
  lastName    String?
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Связи
  team        Team           @relation(fields: [teamId], references: [id])
  teamId      String
  master      Master? // если пользователь является мастером
  bookingLogs BookingLog[]
  teamLogs    TeamLog[]
  loginLogs   UserLoginLog[]

  @@map("users")
}

// Мастера
model Master {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  description String?
  photoUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  user      User             @relation(fields: [userId], references: [id])
  userId    String           @unique
  team      Team             @relation(fields: [teamId], references: [id])
  teamId    String
  schedules MasterSchedule[]
  absences  MasterAbsence[]
  bookings  Booking[]
  services  Service[]        @relation("MasterServices")
  rotations MasterRotation[]

  @@map("masters")
}

// Расписание мастера
model MasterSchedule {
  id         String  @id @default(cuid())
  dayOfWeek  Int // 0-6, где 0 = воскресенье
  startTime  String // формат HH:mm
  endTime    String // формат HH:mm
  breakStart String? // формат HH:mm
  breakEnd   String? // формат HH:mm

  master   Master @relation(fields: [masterId], references: [id])
  masterId String

  @@unique([masterId, dayOfWeek])
  @@map("master_schedules")
}

// Отсутствие мастера (отпуска, больничные)
model MasterAbsence {
  id          String   @id @default(cuid())
  startDate   DateTime
  endDate     DateTime
  reason      String?
  description String?
  isRecurring Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  master   Master @relation(fields: [masterId], references: [id])
  masterId String

  @@map("master_absences")
}

// Группы услуг
model ServiceGroup {
  id        String   @id @default(cuid())
  name      String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team     Team      @relation(fields: [teamId], references: [id])
  teamId   String
  services Service[]

  @@map("service_groups")
}

// Услуги
model Service {
  id                  String   @id @default(cuid())
  name                String
  description         String?
  duration            Int // продолжительность в минутах
  price               Decimal // базовая цена
  photoUrl            String?
  isArchived          Boolean  @default(false)
  order               Int      @default(0)
  requireConfirmation Boolean  @default(false) // требовать подтверждение записи
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Связи
  team     Team             @relation(fields: [teamId], references: [id])
  teamId   String
  group    ServiceGroup?    @relation(fields: [groupId], references: [id])
  groupId  String?
  masters  Master[]         @relation("MasterServices")
  bookings BookingService[]
  actions  ClientAction[]

  @@map("services")
}

// Клиенты
model Client {
  id                    String       @id @default(cuid())
  teamId                String       @map("team_id")
  team                  Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  // Telegram данные
  telegramId            BigInt?      @unique @map("telegram_id")
  telegramUsername      String?      @map("telegram_username")
  telegramFirstName     String?      @map("telegram_first_name")
  telegramLastName      String?      @map("telegram_last_name")
  telegramLanguageCode  String?      @map("telegram_language_code")
  
  // Контактные данные
  phone                 String?
  email                 String?
  firstName             String?      @map("first_name")
  lastName              String?      @map("last_name")
  address               String?
  
  // Дополнительные мессенджеры
  vkId                  String?      @map("vk_id")
  whatsapp              String?
  instagram             String?
  
  // Метаданные
  source                ClientSource @default(TELEGRAM_WEBAPP)
  createdAt             DateTime     @default(now()) @map("created_at")
  updatedAt             DateTime     @updatedAt @map("updated_at")
  lastActivity          DateTime?    @map("last_activity")
  
  // Настройки
  notificationsEnabled  Boolean      @default(true) @map("notifications_enabled")
  preferredLanguage     String       @default("ru") @map("preferred_language")
  
  // Ограничения
  dailyBookingLimit     Int          @default(3) @map("daily_booking_limit")
  isBlocked             Boolean      @default(false) @map("is_blocked")
  
  // Telegram статус
  telegramBlocked       Boolean      @default(false) @map("telegram_blocked")
  telegramErrorCount    Int          @default(0) @map("telegram_error_count")
  lastTelegramError     DateTime?    @map("last_telegram_error")
  telegramErrorReason   String?      @map("telegram_error_reason")
  
  // Связи
  bookings              Booking[]
  events                ClientEvent[]
  actions               ClientAction[]
  telegramErrors        TelegramError[]

  @@unique([email, teamId])
  @@map("clients")
}

// События клиента (аналитика)
model ClientEvent {
  id        String   @id @default(cuid())
  teamId    String
  clientId  String?
  source    String // webapp | public | tg_callback | other
  type      String // page_open | booking_created | booking_rescheduled | booking_cancelled | ...
  metadata  Json?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  team   Team    @relation(fields: [teamId], references: [id])
  client Client? @relation(fields: [clientId], references: [id])

  @@index([teamId, createdAt])
  @@index([teamId, clientId, createdAt])
  @@index([teamId, type, createdAt])
  @@map("client_events")
}

// Бронирования
model Booking {
  id            String        @id @default(cuid())
  bookingNumber String        @unique // уникальный номер брони
  startTime     DateTime
  endTime       DateTime
  totalPrice    Decimal
  notes         String?
  status        BookingStatus @default(NEW)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Связи
  team     Team             @relation(fields: [teamId], references: [id])
  teamId   String
  client   Client?          @relation(fields: [clientId], references: [id])
  clientId String?
  master   Master           @relation(fields: [masterId], references: [id])
  masterId String
  services BookingService[]
  logs     BookingLog[]
  actions  ClientAction[]

  @@map("bookings")
  @@index([teamId, startTime])
  @@index([masterId, startTime])
  @@index([status, startTime])
}

// Связь бронирования с услугами (многие ко многим)
model BookingService {
  id    String  @id @default(cuid())
  price Decimal // цена на момент бронирования

  booking   Booking @relation(fields: [bookingId], references: [id])
  bookingId String
  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String

  @@unique([bookingId, serviceId])
  @@map("booking_services")
}

// Логи операций с бронированиями
model BookingLog {
  id          String     @id @default(cuid())
  action      ActionType
  description String
  createdAt   DateTime   @default(now())

  // Связи
  booking   Booking @relation(fields: [bookingId], references: [id])
  bookingId String
  user      User?   @relation(fields: [userId], references: [id])
  userId    String?
  team      Team    @relation(fields: [teamId], references: [id])
  teamId    String

  @@map("booking_logs")
}

// Логи операций с командами (для БОГ-админки)
model TeamLog {
  id          String   @id @default(cuid())
  action      String // тип действия
  description String
  createdAt   DateTime @default(now())

  // Связи
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("team_logs")
}

// Ротация мастеров для справедливого распределения
model MasterRotation {
  id          String   @id @default(cuid())
  teamId      String
  masterId    String
  position    Int // текущая позиция в ротации
  showCount   Int      @default(0) // количество показов на этой позиции
  lastShownAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  team   Team   @relation(fields: [teamId], references: [id])
  master Master @relation(fields: [masterId], references: [id])

  @@unique([teamId, masterId])
  @@map("master_rotations")
}

// Вебхуки
model Webhook {
  id         String    @id @default(cuid())
  url        String
  event      String // тип события
  isActive   Boolean   @default(true)
  secretKey  String?
  retryCount Int       @default(0)
  lastSentAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("webhooks")
}

// Действия клиентов (для аналитики)
model ClientAction {
  id          String           @id @default(cuid())
  clientId    String           @map("client_id")
  client      Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  teamId      String           @map("team_id")
  team        Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  actionType  ClientActionType @map("action_type")
  pageUrl     String?          @map("page_url")
  serviceId   String?          @map("service_id")
  service     Service?         @relation(fields: [serviceId], references: [id])
  bookingId   String?          @map("booking_id")
  booking     Booking?         @relation(fields: [bookingId], references: [id])
  
  telegramData Json?           @map("telegram_data")
  ip           String?         @map("ip")
  userAgent    String?         @map("user_agent")
  createdAt    DateTime        @default(now()) @map("created_at")
  
  @@map("client_actions")
}

// Настройки уведомлений для салона
model NotificationSettings {
  id                            String   @id @default(cuid())
  teamId                        String   @unique @map("team_id")
  team                          Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  // Telegram настройки
  telegramBotToken              String?  @map("telegram_bot_token")
  telegramWebhookUrl            String?  @map("telegram_webhook_url")
  
  // Настройки уведомлений
  sendBookingConfirmation       Boolean  @default(true) @map("send_booking_confirmation")
  sendBookingCancellation       Boolean  @default(true) @map("send_booking_cancellation")
  sendBookingReschedule         Boolean  @default(true) @map("send_booking_reschedule")
  sendReminders                 Boolean  @default(true) @map("send_reminders")
  
  // Настройки напоминаний
  reminderHoursBefore           Int      @default(24) @map("reminder_hours_before")
  reminderEnabled               Boolean  @default(true) @map("reminder_enabled")
  
  // Шаблоны сообщений
  bookingConfirmationTemplate   String?  @map("booking_confirmation_template")
  bookingCancellationTemplate   String?  @map("booking_cancellation_template")
  bookingRescheduleTemplate     String?  @map("booking_reschedule_template")
  reminderTemplate              String?  @map("reminder_template")
  
  createdAt                     DateTime @default(now()) @map("created_at")
  updatedAt                     DateTime @updatedAt @map("updated_at")
  
  @@map("notification_settings")
}

// Очередь уведомлений
model NotificationQueue {
  id            String              @id @default(cuid())
  type          String
  data          Json
  executeAt     DateTime            @map("execute_at")
  status        NotificationStatus  @default(PENDING)
  attempts      Int                 @default(0)
  maxAttempts   Int                 @default(3) @map("max_attempts")
  errorMessage  String?             @map("error_message")
  createdAt     DateTime            @default(now()) @map("created_at")
  updatedAt     DateTime            @updatedAt @map("updated_at")
  
  @@map("notification_queue")
}

// Ошибки Telegram
model TelegramError {
  id              String   @id @default(cuid())
  clientId        String?  @map("client_id")
  client          Client?  @relation(fields: [clientId], references: [id])
  teamId          String   @map("team_id")
  team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  errorType       String   @map("error_type")
  errorMessage    String   @map("error_message")
  telegramResponse Json?   @map("telegram_response")
  createdAt       DateTime @default(now()) @map("created_at")
  
  @@map("telegram_errors")
}

// Журнал входов пользователей
model UserLoginLog {
  id            String   @id @default(cuid())
  userId        String?
  teamId        String?
  email         String
  success       Boolean
  failureReason String?
  ip            String?
  userAgent     String?
  createdAt     DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
  team Team? @relation(fields: [teamId], references: [id])

  @@index([createdAt])
  @@index([email, createdAt])
  @@index([userId, createdAt])
  @@index([teamId, createdAt])
  @@map("user_login_logs")
}

// Логи взаимодействия с Telegram WebApp
model TelegramLog {
  id          String   @id @default(cuid())
  timestamp   DateTime @default(now())
  level       String   // INFO, ERROR, WARN, DEBUG
  message     String
  data        Json?    // Дополнительные данные
  url         String?  // URL где произошло событие
  userAgent   String?  // User Agent браузера
  ip          String?  // IP адрес
  teamId      String?  // ID салона
  clientId    String?  // ID клиента
  createdAt   DateTime @default(now())
  
  @@index([timestamp])
  @@index([teamId])
  @@index([level])
  @@map("telegram_logs")
}
