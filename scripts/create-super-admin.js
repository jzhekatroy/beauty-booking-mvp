#!/usr/bin/env node
/*
  Usage:
    node scripts/create-super-admin.js user@example.com password123

  –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é SUPER_ADMIN.
  –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –µ–º—É —Ä–æ–ª—å SUPER_ADMIN.
*/

const { PrismaClient } = require('@prisma/client')
const bcrypt = require('bcryptjs')

async function main() {
  const email = process.argv[2]
  const password = process.argv[3]
  
  if (!email) {
    console.error('–£–∫–∞–∂–∏—Ç–µ email: node scripts/create-super-admin.js user@example.com password123')
    process.exit(1)
  }
  
  if (!password) {
    console.error('–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å: node scripts/create-super-admin.js user@example.com password123')
    process.exit(1)
  }

  const prisma = new PrismaClient()
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    let user = await prisma.user.findUnique({ where: { email } })
    
    if (user) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å
      if (user.role === 'SUPER_ADMIN') {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è SUPER_ADMIN')
        process.exit(0)
      }
      
      await prisma.user.update({ 
        where: { email }, 
        data: { 
          role: 'SUPER_ADMIN',
          password: await bcrypt.hash(password, 10)
        } 
      })
      console.log(`‚úÖ –†–æ–ª—å SUPER_ADMIN –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${email}`)
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
      const hashedPassword = await bcrypt.hash(password, 10)
      
      // –ù–∞—Ö–æ–¥–∏–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
      let systemTeam = await prisma.team.findFirst({
        where: { teamNumber: 'B0000001' }
      })
      
      if (!systemTeam) {
        systemTeam = await prisma.team.create({
          data: {
            teamNumber: 'B0000001',
            name: '–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            slug: 'system',
            contactPerson: '–°—É–ø–µ—Ä –ê–¥–º–∏–Ω',
            email: 'admin@beauty-booking.com',
            masterLimit: 0,
          }
        })
      }

      user = await prisma.user.create({
        data: {
          email,
          password: hashedPassword,
          role: 'SUPER_ADMIN',
          firstName: 'Super',
          lastName: 'Admin',
          teamId: systemTeam.id,
        }
      })
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${email} —Å —Ä–æ–ª—å—é SUPER_ADMIN`)
    }
    
    console.log(`\nüîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:`)
    console.log(`   Email: ${email}`)
    console.log(`   –ü–∞—Ä–æ–ª—å: ${password}`)
    console.log(`   URL: http://localhost:3000/login`)
    
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞:', e)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

main()
