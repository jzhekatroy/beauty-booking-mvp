import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { BookingStatus } from '@prisma/client'

interface TimeSlot {
  start: string // HH:mm format
  end: string   // HH:mm format
}

// GET - –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –¥–∞—Ç—É
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  let masterId = ''
  let date = ''
  let serviceDuration = 60
  
  try {
    const { searchParams } = new URL(request.url)
    date = searchParams.get('date') || '' // YYYY-MM-DD format
    serviceDuration = parseInt(searchParams.get('duration') || '60') // –º–∏–Ω—É—Ç—ã

    if (!date) {
      return NextResponse.json(
        { error: '–ü–∞—Ä–∞–º–µ—Ç—Ä date –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      )
    }

    const resolvedParams = await params
    masterId = resolvedParams.id

    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const master = await prisma.master.findUnique({
      where: { id: masterId },
      include: {
        team: true,
        schedules: true,
        absences: true,
        bookings: {
          where: {
            startTime: {
              gte: new Date(`${date}T00:00:00+03:00`), // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
              lt: new Date(`${date}T23:59:59+03:00`)   // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            },
            status: {
              in: [BookingStatus.CREATED, BookingStatus.CONFIRMED, BookingStatus.COMPLETED]
            }
          }
        }
      }
    })

    if (!master) {
      return NextResponse.json(
        { error: '–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      )
    }

    if (!master.isActive) {
      return NextResponse.json(
        { error: '–ú–∞—Å—Ç–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' },
        { status: 400 }
      )
    }

    const requestDate = new Date(date)
    const dayOfWeek = requestDate.getDay() // 0 = Sunday, 1 = Monday, etc.

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—É—Å–∫–∞/–æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
    const hasAbsence = master.absences.some(absence => {
      const startDate = new Date(absence.startDate)
      const endDate = new Date(absence.endDate)
      return requestDate >= startDate && requestDate <= endDate
    })

    if (hasAbsence) {
      return NextResponse.json({
        date,
        masterId,
        masterName: `${master.firstName} ${master.lastName}`,
        availableSlots: [],
        message: '–ú–∞—Å—Ç–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å'
      })
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    const daySchedule = master.schedules.find(schedule => 
      schedule.dayOfWeek === dayOfWeek
    )

    if (!daySchedule) {
      return NextResponse.json({
        date,
        masterId,
        masterName: `${master.firstName} ${master.lastName}`,
        availableSlots: [],
        message: '–ú–∞—Å—Ç–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏'
      })
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–æ—Ç—ã
    const bookingStep = master.team.bookingStep
    const workingSlots = generateWorkingSlots(
      daySchedule.startTime,
      daySchedule.endTime,
      daySchedule.breakStart,
      daySchedule.breakEnd,
      bookingStep,
      serviceDuration
    )

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã
    const occupiedSlots = master.bookings.map(booking => ({
      start: formatTime(booking.startTime),
      end: formatTime(booking.endTime)
    }))
    
    console.log('üìÖ –ó–ê–ù–Ø–¢–´–ï –°–õ–û–¢–´:')
    master.bookings.forEach((booking, i) => {
      console.log(`   ${i + 1}. ${formatTime(booking.startTime)}-${formatTime(booking.endTime)} (${booking.status})`)
    })

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–ª–æ—Ç–æ–≤ (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
    const now = new Date()
    const moscowTime = new Date(now.getTime() + (3 * 60 * 60 * 1000)) // UTC+3
    const currentTime = moscowTime.toTimeString().slice(0, 5) // HH:MM
    const isToday = requestDate.toDateString() === moscowTime.toDateString()
    
    console.log('üïê DEBUG –í–†–ï–ú–Ø:')
    console.log('   - UTC –≤—Ä–µ–º—è:', now.toISOString())
    console.log('   - –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è:', moscowTime.toISOString())
    console.log('   - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (HH:MM):', currentTime)
    console.log('   - –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è –¥–∞—Ç–∞:', date, requestDate.toDateString())
    console.log('   - –°–µ–≥–æ–¥–Ω—è –ª–∏:', isToday)
    console.log('   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', master.bookings.length)

    const availableSlots = workingSlots.filter(slot => {
      // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã
      if (isSlotOccupied(slot, occupiedSlots)) {
        console.log('‚ùå –°–ª–æ—Ç –∑–∞–Ω—è—Ç:', slot.start)
        return false
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è, –∏—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ —Å–ª–æ—Ç—ã
      if (isToday) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const slotMinutes = timeToMinutes(slot.start)
        const currentMinutes = timeToMinutes(currentTime)
        
        if (slotMinutes <= currentMinutes) {
          console.log('‚ùå –°–ª–æ—Ç –≤ –ø—Ä–æ—à–ª–æ–º:', slot.start, '(', slotMinutes, '–º–∏–Ω) <=', currentTime, '(', currentMinutes, '–º–∏–Ω)')
          return false
        }
      }
      
      console.log('‚úÖ –°–ª–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω:', slot.start)
      return true
    })
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ HH:MM –≤ –º–∏–Ω—É—Ç—ã
    function timeToMinutes(time: string): number {
      const [hours, minutes] = time.split(':').map(Number)
      return hours * 60 + minutes
    }
    
    console.log('üìä –í—Å–µ–≥–æ —Ä–∞–±–æ—á–∏—Ö —Å–ª–æ—Ç–æ–≤:', workingSlots.length)
    console.log('üìä –ó–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤:', occupiedSlots.length)
    console.log('üìä –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:', availableSlots.length)

    return NextResponse.json({
      date,
      masterId,
      masterName: `${master.firstName} ${master.lastName}`,
      bookingStep,
      serviceDuration,
      workingHours: {
        start: daySchedule.startTime,
        end: daySchedule.endTime,
        breakStart: daySchedule.breakStart,
        breakEnd: daySchedule.breakEnd
      },
      availableSlots,
      occupiedSlots
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:', error)
    
    // –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    const errorStack = error instanceof Error ? error.stack : '–ù–µ—Ç —Å—Ç–µ–∫–∞'
    
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      message: errorMessage,
      stack: errorStack,
      masterId,
      date,
      serviceDuration
    })
    
    return NextResponse.json(
      { 
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤',
        details: errorMessage,
        masterId,
        date 
      },
      { status: 500 }
    )
  } finally {
    // –ù–µ –æ—Ç–∫–ª—é—á–∞–µ–º singleton Prisma –∫–ª–∏–µ–Ω—Ç
  }
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–∞–±–æ—á–∏–µ —Å–ª–æ—Ç—ã —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
function generateWorkingSlots(
  startTime: string,
  endTime: string,
  breakStart: string | null,
  breakEnd: string | null,
  stepMinutes: number,
  serviceDuration: number
): TimeSlot[] {
  const slots: TimeSlot[] = []
  
  const start = parseTime(startTime)
  const end = parseTime(endTime)
  const breakStartTime = breakStart ? parseTime(breakStart) : null
  const breakEndTime = breakEnd ? parseTime(breakEnd) : null

  let current = start
  
  while (current + serviceDuration <= end) {
    const slotEnd = current + serviceDuration
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ —Å–ª–æ—Ç —Å –ø–µ—Ä–µ—Ä—ã–≤–æ–º
    if (breakStartTime && breakEndTime) {
      const slotStartsInBreak = current >= breakStartTime && current < breakEndTime
      const slotEndsInBreak = slotEnd > breakStartTime && slotEnd <= breakEndTime
      const slotCoversBreak = current < breakStartTime && slotEnd > breakEndTime
      
      if (slotStartsInBreak || slotEndsInBreak || slotCoversBreak) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Å–ª–æ—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–Ω—Ü—É –ø–µ—Ä–µ—Ä—ã–≤–∞
        if (current < breakEndTime) {
          current = breakEndTime
          continue
        }
      }
    }
    
    slots.push({
      start: formatTimeFromMinutes(current),
      end: formatTimeFromMinutes(slotEnd)
    })
    
    current += stepMinutes
  }
  
  return slots
}

// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç
function isSlotOccupied(slot: TimeSlot, occupiedSlots: TimeSlot[]): boolean {
  const slotStart = parseTime(slot.start)
  const slotEnd = parseTime(slot.end)
  
  return occupiedSlots.some(occupied => {
    const occupiedStart = parseTime(occupied.start)
    const occupiedEnd = parseTime(occupied.end)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤
    return (slotStart < occupiedEnd && slotEnd > occupiedStart)
  })
}

// –ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:mm –≤ –º–∏–Ω—É—Ç—ã –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è
function parseTime(timeStr: string): number {
  const [hours, minutes] = timeStr.split(':').map(Number)
  return hours * 60 + minutes
}

// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–∏–Ω—É—Ç—ã –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç HH:mm
function formatTimeFromMinutes(minutes: number): string {
  const hours = Math.floor(minutes / 60)
  const mins = minutes % 60
  return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`
}

// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç Date –≤ —Ñ–æ—Ä–º–∞—Ç HH:mm
function formatTime(date: Date): string {
  return date.toTimeString().slice(0, 5)
}