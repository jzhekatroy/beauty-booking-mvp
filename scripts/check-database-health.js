const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function checkDatabaseHealth() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ')
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    const tables = [
      'users',
      'teams', 
      'masters',
      'services',
      'bookings',
      'global_notification_settings'
    ]
    
    for (const table of tables) {
      try {
        const result = await prisma.$queryRaw`
          SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name = ${table}
          );
        `
        const exists = result[0].exists
        console.log(`${exists ? '‚úÖ' : '‚ùå'} –¢–∞–±–ª–∏—Ü–∞ ${table}: ${exists ? '—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`)
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ${table}:`, error.message)
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É global_notification_settings
    try {
      const columns = await prisma.$queryRaw`
        SELECT column_name, data_type, is_nullable, column_default
        FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'global_notification_settings'
        ORDER BY ordinal_position;
      `
      
      console.log('üìä –ö–æ–ª–æ–Ω–∫–∏ –≤ global_notification_settings:')
      columns.forEach(col => {
        console.log(`  - ${col.column_name}: ${col.data_type} ${col.is_nullable === 'NO' ? 'NOT NULL' : 'NULL'} ${col.column_default ? `DEFAULT ${col.column_default}` : ''}`)
      })
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
      const requiredColumns = ['max_requests_per_minute', 'updated_at']
      const existingColumns = columns.map(col => col.column_name)
      
      for (const requiredCol of requiredColumns) {
        if (existingColumns.includes(requiredCol)) {
          console.log(`‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ ${requiredCol} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`)
        } else {
          console.log(`‚ùå –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ ${requiredCol} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`)
        }
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–µ–º—ã global_notification_settings:', error.message)
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    try {
      const userCount = await prisma.user.count()
      const teamCount = await prisma.team.count()
      const masterCount = await prisma.master.count()
      const serviceCount = await prisma.service.count()
      const bookingCount = await prisma.booking.count()
      
      console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö:')
      console.log(`  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${userCount}`)
      console.log(`  - –ö–æ–º–∞–Ω–¥—ã: ${teamCount}`)
      console.log(`  - –ú–∞—Å—Ç–µ—Ä–∞: ${masterCount}`)
      console.log(`  - –£—Å–ª—É–≥–∏: ${serviceCount}`)
      console.log(`  - –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${bookingCount}`)
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π:', error.message)
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    try {
      const settings = await prisma.globalNotificationSettings.findFirst()
      if (settings) {
        console.log('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–π–¥–µ–Ω—ã')
        console.log(`  - max_requests_per_minute: ${settings.max_requests_per_minute}`)
        console.log(`  - updated_at: ${settings.updated_at}`)
      } else {
        console.log('‚ö†Ô∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error.message)
    }
    
    console.log('üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

checkDatabaseHealth()
