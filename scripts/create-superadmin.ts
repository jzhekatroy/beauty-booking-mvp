import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function createSuperAdmin() {
  try {
    console.log('üîê –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω
    const existingAdmin = await prisma.user.findFirst({
      where: { role: 'SUPER_ADMIN' }
    })
    
    if (existingAdmin) {
      console.log('‚úÖ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingAdmin.email)
      return
    }
    
    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash('admin123', 10)
    
    // –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
    const superAdmin = await prisma.user.create({
      data: {
        email: 'admin@beauty-booking.com',
        password: hashedPassword,
        role: 'SUPER_ADMIN',
        firstName: 'Super',
        lastName: 'Admin',
        isActive: true,
        team: {
          create: {
            teamNumber: 'B0000001',
            name: 'System Team',
            slug: 'system',
            timezone: 'Europe/Moscow',
            status: 'ACTIVE',
            contactPerson: 'Super Admin',
            email: 'admin@beauty-booking.com'
          }
        }
      }
    })
    
    console.log('‚úÖ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!')
    console.log('üìß Email:', superAdmin.email)
    console.log('üîë –ü–∞—Ä–æ–ª—å: admin123')
    console.log('üë§ –†–æ–ª—å:', superAdmin.role)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createSuperAdmin()
