import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

export async function GET(request: NextRequest) {
  try {
    console.log('üîç Checking database state...')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ client_actions
    const columns = await prisma.$queryRaw`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'client_actions'
      ORDER BY column_name
    `

    console.log('üìä client_actions columns:', columns)

    // –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ ClientAction
    try {
      const actions = await prisma.clientAction.findMany({
        take: 1
      })
      console.log('‚úÖ ClientAction query successful:', actions.length, 'records')
    } catch (error) {
      console.error('‚ùå ClientAction query failed:', error)
      return NextResponse.json({ 
        error: 'ClientAction query failed',
        details: error instanceof Error ? error.message : String(error),
        columns
      }, { status: 500 })
    }

    // –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Client
    try {
      const clients = await prisma.client.findMany({
        take: 1,
        include: {
          bookings: {
            take: 1
          }
        }
      })
      console.log('‚úÖ Client query successful:', clients.length, 'records')
    } catch (error) {
      console.error('‚ùå Client query failed:', error)
      return NextResponse.json({ 
        error: 'Client query failed',
        details: error instanceof Error ? error.message : String(error),
        columns
      }, { status: 500 })
    }

    return NextResponse.json({ 
      success: true,
      message: 'Database is working correctly',
      columns
    })

  } catch (error) {
    console.error('‚ùå Database check error:', error)
    return NextResponse.json({ 
      error: 'Database check failed',
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 })
  }
}
