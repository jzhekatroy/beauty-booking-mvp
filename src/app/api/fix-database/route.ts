import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
    const { key } = await request.json()
    if (key !== 'fix-db-2025') {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    console.log('üîß Starting database fix...')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ action_type
    const result = await prisma.$queryRaw`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'client_actions' 
      AND column_name = 'action_type'
    `

    console.log('üìä action_type column exists:', result)

    // –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
    if (!result || (result as any[]).length === 0) {
      console.log('üî® Creating action_type column...')
      
      await prisma.$executeRaw`
        ALTER TABLE client_actions 
        ADD COLUMN action_type VARCHAR(50) DEFAULT 'PAGE_VIEW'
      `
      
      console.log('‚úÖ action_type column created')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ actionType
    const result2 = await prisma.$queryRaw`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'client_actions' 
      AND column_name = 'actionType'
    `

    console.log('üìä actionType column exists:', result2)

    // –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ actionType —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ—ë
    if (result2 && (result2 as any[]).length > 0) {
      console.log('üóëÔ∏è Removing actionType column...')
      
      await prisma.$executeRaw`
        ALTER TABLE client_actions 
        DROP COLUMN "actionType"
      `
      
      console.log('‚úÖ actionType column removed')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const finalResult = await prisma.$queryRaw`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'client_actions' 
      AND column_name IN ('action_type', 'actionType')
    `

    console.log('üéØ Final state:', finalResult)

    return NextResponse.json({ 
      success: true, 
      message: 'Database fixed successfully',
      columns: finalResult
    })

  } catch (error) {
    console.error('‚ùå Database fix error:', error)
    return NextResponse.json({ 
      error: 'Failed to fix database',
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 })
  }
}
