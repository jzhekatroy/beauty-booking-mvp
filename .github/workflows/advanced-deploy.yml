name: Advanced Deploy with Database Migrations

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_migrations:
        description: 'Skip database migrations (dangerous!)'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '18'
  DATABASE_URL: ${{ secrets.DATABASE_URL }}

jobs:
  pre-deploy-checks:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Type Check
      run: npm run build
        
    - name: Check if deployment is needed
      id: check
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ö–µ–º–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if git diff --name-only HEAD~1 HEAD | grep -E "(prisma/schema.prisma|prisma/migrations)" > /dev/null; then
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          echo "üìä Database schema changes detected"
        else
          echo "should_deploy=false" >> $GITHUB_OUTPUT
          echo "üìä No database schema changes"
        fi

  database-migration:
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should_deploy == 'true' && github.event.inputs.skip_migrations != 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate Prisma Client
      run: npx prisma generate
        
    - name: Backup Database (if possible)
      run: |
        echo "üíæ Creating database backup..."
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # –ù–∞–ø—Ä–∏–º–µ—Ä, pg_dump –¥–ª—è PostgreSQL
        
    - name: Run Database Migrations
      run: |
        echo "üîÑ Running database migrations..."
        npx prisma migrate deploy
        
    - name: Verify Migration Success
      run: |
        echo "‚úÖ Verifying migration success..."
        npx prisma db push --accept-data-loss
        
    - name: Run Database Seed (if needed)
      run: |
        echo "üå± Seeding database..."
        npx prisma db seed
      continue-on-error: true

  deploy:
    needs: [pre-deploy-checks, database-migration]
    if: always() && (needs.database-migration.result == 'success' || needs.database-migration.result == 'skipped')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate Prisma Client
      run: npx prisma generate
        
    - name: Build Application
      run: npm run build
        
    - name: Deploy to Production
      run: |
        echo "üöÄ Deploying to production..."
        # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ –≤–∞—à —Ö–æ—Å—Ç–∏–Ω–≥
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è Vercel, Netlify, –∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        
    - name: Post-deploy Health Check
      run: |
        echo "üîç Running post-deploy health check..."
        # –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
        
    - name: Notify Success
      run: |
        echo "‚úÖ Deployment completed successfully!"
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (Slack, Discord, email)

  rollback:
    needs: [pre-deploy-checks, database-migration, deploy]
    if: failure() && needs.database-migration.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
    - name: Rollback Database
      run: |
        echo "üîÑ Rolling back database changes..."
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–π
        # –ù–∞–ø—Ä–∏–º–µ—Ä, npx prisma migrate reset
        
    - name: Notify Failure
      run: |
        echo "‚ùå Deployment failed and rollback completed"
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
