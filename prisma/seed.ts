import { PrismaClient, UserRole, TeamStatus, BookingStatus, ActionType } from '@prisma/client'
import { hashPassword, generateTeamNumber, generateBookingNumber } from '../src/lib/auth'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')

  // –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
  const superAdminTeam = await prisma.team.create({
    data: {
      teamNumber: 'B0000001',
      name: '–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
      slug: 'system',
      contactPerson: '–°—É–ø–µ—Ä –ê–¥–º–∏–Ω',
      email: 'admin@beauty-booking.com',
      masterLimit: 0,
    }
  })

  const superAdmin = await prisma.user.create({
    data: {
      email: 'admin@beauty-booking.com',
      password: await hashPassword('admin123'),
      role: UserRole.SUPER_ADMIN,
      firstName: '–°—É–ø–µ—Ä',
      lastName: '–ê–¥–º–∏–Ω',
      teamId: superAdminTeam.id,
    }
  })

  console.log('‚úÖ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω: admin@beauty-booking.com / admin123')

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∞–ª–æ–Ω
  const testTeam = await prisma.team.create({
    data: {
      teamNumber: generateTeamNumber(),
      name: 'Beauty Salon',
      slug: 'beauty-salon',
      contactPerson: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
      email: 'salon@example.com',
      masterLimit: 5,
      bookingStep: 15,
    }
  })

  // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∞–ª–æ–Ω–∞
  const teamAdmin = await prisma.user.create({
    data: {
      email: 'salon@example.com',
      password: await hashPassword('password123'),
      role: UserRole.ADMIN,
      firstName: '–ú–∞—Ä–∏—è',
      lastName: '–ü–µ—Ç—Ä–æ–≤–∞',
      teamId: testTeam.id,
    }
  })

  // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤
  const master1User = await prisma.user.create({
    data: {
      email: 'anna@example.com',
      password: await hashPassword('password123'),
      role: UserRole.MASTER,
      firstName: '–ê–Ω–Ω–∞',
      lastName: '–ö–æ–∑–ª–æ–≤–∞',
      teamId: testTeam.id,
    }
  })

  const master1 = await prisma.master.create({
    data: {
      firstName: '–ê–Ω–Ω–∞',
      lastName: '–ö–æ–∑–ª–æ–≤–∞',
      description: '–ú–∞—Å—Ç–µ—Ä –º–∞–Ω–∏–∫—é—Ä–∞ –∏ –ø–µ–¥–∏–∫—é—Ä–∞ —Å –æ–ø—ã—Ç–æ–º 5 –ª–µ—Ç',
      userId: master1User.id,
      teamId: testTeam.id,
    }
  })

  const master2User = await prisma.user.create({
    data: {
      email: 'elena@example.com',
      password: await hashPassword('password123'),
      role: UserRole.MASTER,
      firstName: '–ï–ª–µ–Ω–∞',
      lastName: '–°–∏–¥–æ—Ä–æ–≤–∞',
      teamId: testTeam.id,
    }
  })

  const master2 = await prisma.master.create({
    data: {
      firstName: '–ï–ª–µ–Ω–∞',
      lastName: '–°–∏–¥–æ—Ä–æ–≤–∞',
      description: '–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä-—Å—Ç–∏–ª–∏—Å—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—é',
      userId: master2User.id,
      teamId: testTeam.id,
    }
  })

  // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
  // –ê–Ω–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ü–Ω-–ü—Ç 9:00-18:00
  for (let day = 1; day <= 5; day++) {
    await prisma.masterSchedule.create({
      data: {
        masterId: master1.id,
        dayOfWeek: day,
        startTime: '09:00',
        endTime: '18:00',
        breakStart: '13:00',
        breakEnd: '14:00',
      }
    })
  }

  // –ï–ª–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –í—Ç-–°–± 10:00-19:00
  for (let day = 2; day <= 6; day++) {
    await prisma.masterSchedule.create({
      data: {
        masterId: master2.id,
        dayOfWeek: day,
        startTime: '10:00',
        endTime: '19:00',
        breakStart: '14:00',
        breakEnd: '15:00',
      }
    })
  }

  // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã —É—Å–ª—É–≥
  const hairGroup = await prisma.serviceGroup.create({
    data: {
      name: '–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏',
      order: 1,
      teamId: testTeam.id,
    }
  })

  const nailGroup = await prisma.serviceGroup.create({
    data: {
      name: '–ú–∞–Ω–∏–∫—é—Ä –∏ –ø–µ–¥–∏–∫—é—Ä',
      order: 2,
      teamId: testTeam.id,
    }
  })

  // –°–æ–∑–¥–∞–µ–º —É—Å–ª—É–≥–∏
  const hairServices = [
    { name: '–°—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è', duration: 60, price: 2500, description: '–°—Ç—Ä–∏–∂–∫–∞ –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏' },
    { name: '–°—Ç—Ä–∏–∂–∫–∞ –º—É–∂—Å–∫–∞—è', duration: 45, price: 1500, description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞' },
    { name: '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ', duration: 180, price: 5000, description: '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤ –æ–¥–∏–Ω —Ç–æ–Ω' },
    { name: '–£–∫–ª–∞–¥–∫–∞', duration: 45, price: 1200, description: '–£–∫–ª–∞–¥–∫–∞ –≤–æ–ª–æ—Å —Ñ–µ–Ω–æ–º' },
    { name: '–ú–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ', duration: 240, price: 7000, description: '–ú–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å' },
  ]

  const nailServices = [
    { name: '–ú–∞–Ω–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', duration: 90, price: 1800, description: '–û–±—Ä–µ–∑–Ω–æ–π –º–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º' },
    { name: '–ú–∞–Ω–∏–∫—é—Ä –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–π', duration: 75, price: 2000, description: '–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –º–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º' },
    { name: '–ü–µ–¥–∏–∫—é—Ä', duration: 120, price: 2500, description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–µ–¥–∏–∫—é—Ä' },
    { name: '–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –Ω–æ–≥—Ç–µ–π', duration: 150, price: 3500, description: '–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –≥–µ–ª–µ–º' },
  ]

  for (const service of hairServices) {
    await prisma.service.create({
      data: {
        ...service,
        teamId: testTeam.id,
        groupId: hairGroup.id,
        masters: {
          connect: [{ id: master2.id }] // –ï–ª–µ–Ω–∞ - –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä
        }
      }
    })
  }

  for (const service of nailServices) {
    await prisma.service.create({
      data: {
        ...service,
        teamId: testTeam.id,
        groupId: nailGroup.id,
        masters: {
          connect: [{ id: master1.id }] // –ê–Ω–Ω–∞ - –º–∞—Å—Ç–µ—Ä –º–∞–Ω–∏–∫—é—Ä–∞
        }
      }
    })
  }

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  const clients = [
    { email: 'anna.ivanova@example.com', firstName: '–ê–Ω–Ω–∞', lastName: '–ò–≤–∞–Ω–æ–≤–∞', phone: '+7 900 123-45-67' },
    { email: 'elena.sidorova@example.com', firstName: '–ï–ª–µ–Ω–∞', lastName: '–°–∏–¥–æ—Ä–æ–≤–∞', phone: '+7 900 234-56-78' },
    { email: 'olga.fedorova@example.com', firstName: '–û–ª—å–≥–∞', lastName: '–§–µ–¥–æ—Ä–æ–≤–∞', phone: '+7 900 345-67-89' },
    { email: 'maria.smirnova@example.com', firstName: '–ú–∞—Ä–∏—è', lastName: '–°–º–∏—Ä–Ω–æ–≤–∞', phone: '+7 900 456-78-90' },
  ]

  const createdClients = []
  for (const client of clients) {
    const createdClient = await prisma.client.create({
      data: {
        ...client,
        teamId: testTeam.id,
      }
    })
    createdClients.push(createdClient)
  }

  // –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  const services = await prisma.service.findMany({
    where: { teamId: testTeam.id }
  })

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const tomorrow = new Date()
  tomorrow.setDate(tomorrow.getDate() + 1)
  tomorrow.setHours(10, 0, 0, 0)

  // –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ 1: –ú–∞–Ω–∏–∫—é—Ä —É –ê–Ω–Ω—ã
  const booking1 = await prisma.booking.create({
    data: {
      bookingNumber: generateBookingNumber(),
      startTime: new Date(tomorrow.getTime()),
      endTime: new Date(tomorrow.getTime() + 90 * 60 * 1000), // +90 –º–∏–Ω—É—Ç
      totalPrice: 1800,
      status: BookingStatus.CONFIRMED,
      teamId: testTeam.id,
      clientId: createdClients[0].id,
      masterId: master1.id,
      notes: '–ü–µ—Ä–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ',
    }
  })

  // –°–≤—è–∑—ã–≤–∞–µ–º —Å —É—Å–ª—É–≥–æ–π
  await prisma.bookingService.create({
    data: {
      bookingId: booking1.id,
      serviceId: services.find(s => s.name === '–ú–∞–Ω–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π')!.id,
      price: 1800,
    }
  })

  // –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ 2: –°—Ç—Ä–∏–∂–∫–∞ —É –ï–ª–µ–Ω—ã
  const nextDay = new Date(tomorrow.getTime() + 24 * 60 * 60 * 1000)
  nextDay.setHours(14, 0, 0, 0)

  const booking2 = await prisma.booking.create({
    data: {
      bookingNumber: generateBookingNumber(),
      startTime: nextDay,
      endTime: new Date(nextDay.getTime() + 60 * 60 * 1000), // +60 –º–∏–Ω—É—Ç
      totalPrice: 2500,
      status: BookingStatus.NEW,
      teamId: testTeam.id,
      clientId: createdClients[1].id,
      masterId: master2.id,
    }
  })

  await prisma.bookingService.create({
    data: {
      bookingId: booking2.id,
      serviceId: services.find(s => s.name === '–°—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è')!.id,
      price: 2500,
    }
  })

  // –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  await prisma.bookingLog.create({
    data: {
      bookingId: booking1.id,
      action: ActionType.NEW,
      description: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º',
      teamId: testTeam.id,
    }
  })

  await prisma.bookingLog.create({
    data: {
      bookingId: booking1.id,
      action: ActionType.CONFIRMED,
      description: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
      userId: teamAdmin.id,
      teamId: testTeam.id,
    }
  })

  await prisma.bookingLog.create({
    data: {
      bookingId: booking2.id,
      action: ActionType.NEW,
      description: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º',
      teamId: testTeam.id,
    }
  })

  console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∞–ª–æ–Ω —Å–æ–∑–¥–∞–Ω:')
  console.log(`   - –ù–∞–∑–≤–∞–Ω–∏–µ: ${testTeam.name}`)
  console.log(`   - –ù–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: ${testTeam.teamNumber}`)
  console.log(`   - Slug –¥–ª—è –∑–∞–ø–∏—Å–∏: ${testTeam.slug}`)
  console.log(`   - –ê–¥–º–∏–Ω: ${teamAdmin.email} / password123`)
  console.log(`   - –ú–∞—Å—Ç–µ—Ä–∞: anna@example.com, elena@example.com / password123`)
  console.log(`   - –°–æ–∑–¥–∞–Ω–æ ${services.length} —É—Å–ª—É–≥`)
  console.log(`   - –°–æ–∑–¥–∞–Ω–æ ${createdClients.length} –∫–ª–∏–µ–Ω—Ç–æ–≤`)
  console.log(`   - –°–æ–∑–¥–∞–Ω–æ 2 —Ç–µ—Å—Ç–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è`)

  console.log('\nüîó –°—Å—ã–ª–∫–∏:')
  console.log(`   - –ì–ª–∞–≤–Ω–∞—è: http://localhost:3000`)
  console.log(`   - –í—Ö–æ–¥: http://localhost:3000/login`)
  console.log(`   - –ê–¥–º–∏–Ω–∫–∞ —Å–∞–ª–æ–Ω–∞: http://localhost:3000/admin`)
  console.log(`   - –í–∏–¥–∂–µ—Ç –∑–∞–ø–∏—Å–∏: http://localhost:3000/book/${testTeam.slug}`)
}

main()
  .then(async () => {
    await prisma.$disconnect()
    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!')
  })
  .catch(async (e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', e)
    await prisma.$disconnect()
    process.exit(1)
  })
// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É global_notification_settings –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
await prisma.$executeRaw`
  CREATE TABLE IF NOT EXISTS "global_notification_settings" (
    "id" TEXT NOT NULL,
    "max_requests_per_minute" INTEGER NOT NULL DEFAULT 25,
    "request_delay_ms" INTEGER NOT NULL DEFAULT 2000,
    "max_retry_attempts" INTEGER NOT NULL DEFAULT 3,
    "retry_delay_ms" INTEGER NOT NULL DEFAULT 5000,
    "exponential_backoff" BOOLEAN NOT NULL DEFAULT true,
    "failure_threshold" INTEGER NOT NULL DEFAULT 5,
    "recovery_timeout_ms" INTEGER NOT NULL DEFAULT 60000,
    "enabled" BOOLEAN NOT NULL DEFAULT true,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMP(3) NOT NULL,
    CONSTRAINT "global_notification_settings_pkey" PRIMARY KEY ("id")
  );
`

await prisma.$executeRaw`
  CREATE UNIQUE INDEX IF NOT EXISTS "global_notification_settings_id_key" 
  ON "global_notification_settings"("id");
`

await prisma.$executeRaw`
  INSERT INTO "global_notification_settings" (
    "id", "max_requests_per_minute", "request_delay_ms", "max_retry_attempts",
    "retry_delay_ms", "exponential_backoff", "failure_threshold",
    "recovery_timeout_ms", "enabled", "created_at", "updated_at"
  ) VALUES (
    'global', 25, 2000, 3, 5000, true, 5, 60000, true, NOW(), NOW()
  ) ON CONFLICT ("id") DO NOTHING;
`

console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ global_notification_settings —Å–æ–∑–¥–∞–Ω–∞')

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É global_notification_settings –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
await prisma.$executeRaw`
  CREATE TABLE IF NOT EXISTS "global_notification_settings" (
    "id" TEXT NOT NULL,
    "max_requests_per_minute" INTEGER NOT NULL DEFAULT 25,
    "request_delay_ms" INTEGER NOT NULL DEFAULT 2000,
    "max_retry_attempts" INTEGER NOT NULL DEFAULT 3,
    "retry_delay_ms" INTEGER NOT NULL DEFAULT 5000,
    "exponential_backoff" BOOLEAN NOT NULL DEFAULT true,
    "failure_threshold" INTEGER NOT NULL DEFAULT 5,
    "recovery_timeout_ms" INTEGER NOT NULL DEFAULT 60000,
    "enabled" BOOLEAN NOT NULL DEFAULT true,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMP(3) NOT NULL,
    CONSTRAINT "global_notification_settings_pkey" PRIMARY KEY ("id")
  );
`

await prisma.$executeRaw`
  CREATE UNIQUE INDEX IF NOT EXISTS "global_notification_settings_id_key" 
  ON "global_notification_settings"("id");
`

await prisma.$executeRaw`
  INSERT INTO "global_notification_settings" (
    "id", "max_requests_per_minute", "request_delay_ms", "max_retry_attempts",
    "retry_delay_ms", "exponential_backoff", "failure_threshold",
    "recovery_timeout_ms", "enabled", "created_at", "updated_at"
  ) VALUES (
    'global', 25, 2000, 3, 5000, true, 5, 60000, true, NOW(), NOW()
  ) ON CONFLICT ("id") DO NOTHING;
`

console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ global_notification_settings —Å–æ–∑–¥–∞–Ω–∞')

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É global_notification_settings –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
await prisma.$executeRaw`
  CREATE TABLE IF NOT EXISTS "global_notification_settings" (
    "id" TEXT NOT NULL,
    "max_requests_per_minute" INTEGER NOT NULL DEFAULT 25,
    "request_delay_ms" INTEGER NOT NULL DEFAULT 2000,
    "max_retry_attempts" INTEGER NOT NULL DEFAULT 3,
    "retry_delay_ms" INTEGER NOT NULL DEFAULT 5000,
    "exponential_backoff" BOOLEAN NOT NULL DEFAULT true,
    "failure_threshold" INTEGER NOT NULL DEFAULT 5,
    "recovery_timeout_ms" INTEGER NOT NULL DEFAULT 60000,
    "enabled" BOOLEAN NOT NULL DEFAULT true,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMP(3) NOT NULL,
    CONSTRAINT "global_notification_settings_pkey" PRIMARY KEY ("id")
  );
`

await prisma.$executeRaw`
  CREATE UNIQUE INDEX IF NOT EXISTS "global_notification_settings_id_key" 
  ON "global_notification_settings"("id");
`

await prisma.$executeRaw`
  INSERT INTO "global_notification_settings" (
    "id", "max_requests_per_minute", "request_delay_ms", "max_retry_attempts",
    "retry_delay_ms", "exponential_backoff", "failure_threshold",
    "recovery_timeout_ms", "enabled", "created_at", "updated_at"
  ) VALUES (
    'global', 25, 2000, 3, 5000, true, 5, 60000, true, NOW(), NOW()
  ) ON CONFLICT ("id") DO NOTHING;
`

console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ global_notification_settings —Å–æ–∑–¥–∞–Ω–∞')
