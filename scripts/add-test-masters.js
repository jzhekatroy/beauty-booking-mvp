const fetch = require('node-fetch');

const API_BASE = 'http://localhost:3000/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const ADMIN_EMAIL = 'salon@example.com';
const ADMIN_PASSWORD = 'password123';

const TEST_MASTERS = [
  {
    email: 'anna@example.com',
    firstName: '–ê–Ω–Ω–∞',
    lastName: '–ü–µ—Ç—Ä–æ–≤–∞',
    description: '–ú–∞—Å—Ç–µ—Ä –º–∞–Ω–∏–∫—é—Ä–∞ –∏ –ø–µ–¥–∏–∫—é—Ä–∞ —Å 5-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–º –º–∞–Ω–∏–∫—é—Ä–µ –∏ nail-–∞—Ä—Ç–µ.',
    photoUrl: 'https://images.unsplash.com/photo-1594824475317-2f7da8e7c2b0?w=300&h=300&fit=crop&crop=face',
    password: 'password123'
  },
  {
    email: 'elena@example.com', 
    firstName: '–ï–ª–µ–Ω–∞',
    lastName: '–°–∏–¥–æ—Ä–æ–≤–∞',
    description: '–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä-—Å—Ç–∏–ª–∏—Å—Ç. –†–∞–±–æ—Ç–∞–µ—Ç —Å –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ–º, —Å—Ç—Ä–∏–∂–∫–∞–º–∏ –∏ —É–∫–ª–∞–¥–∫–∞–º–∏. –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–≤—ã—à–∞–µ—Ç –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é.',
    photoUrl: 'https://images.unsplash.com/photo-1580489944761-15a19d654956?w=300&h=300&fit=crop&crop=face',
    password: 'password123'
  }
];

async function loginAdmin() {
  console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
  
  const response = await fetch(`${API_BASE}/auth/login`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      email: ADMIN_EMAIL,
      password: ADMIN_PASSWORD
    })
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.error}`);
  }

  const data = await response.json();
  console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
  return data.token;
}

async function getServices(token) {
  console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥...');
  
  const response = await fetch(`${API_BASE}/services`, {
    headers: {
      'Authorization': `Bearer ${token}`
    }
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥: ${error.error}`);
  }

  const data = await response.json();
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${data.services.length} —É—Å–ª—É–≥`);
  return data.services;
}

async function addMaster(token, masterData, services) {
  console.log(`üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ ${masterData.firstName} ${masterData.lastName}...`);
  
  // –ù–∞–∑–Ω–∞—á–∞–µ–º –º–∞—Å—Ç–µ—Ä—É —Å–ª—É—á–∞–π–Ω—ã–µ —É—Å–ª—É–≥–∏ (1-3 —É—Å–ª—É–≥–∏)
  const shuffledServices = services.sort(() => 0.5 - Math.random());
  const assignedServices = shuffledServices.slice(0, Math.floor(Math.random() * 3) + 1);
  const serviceIds = assignedServices.map(s => s.id);
  
  const response = await fetch(`${API_BASE}/masters`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    body: JSON.stringify({
      ...masterData,
      serviceIds
    })
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞: ${error.error}`);
  }

  const data = await response.json();
  console.log(`‚úÖ –ú–∞—Å—Ç–µ—Ä ${masterData.firstName} –¥–æ–±–∞–≤–ª–µ–Ω —Å —É—Å–ª—É–≥–∞–º–∏: ${assignedServices.map(s => s.name).join(', ')}`);
  return data.master;
}

async function main() {
  try {
    console.log('üöÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤...');
    console.log('================================');

    // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
    const token = await loginAdmin();

    // –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏
    const services = await getServices(token);

    if (services.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —É—Å–ª—É–≥–∏.');
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤
    for (const masterData of TEST_MASTERS) {
      try {
        await addMaster(token, masterData, services);
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ ${masterData.firstName}: ${error.message}`);
      }
    }

    console.log('');
    console.log('üéâ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('');
    console.log('üìã –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –º–∞—Å—Ç–µ—Ä–æ–≤:');
    TEST_MASTERS.forEach(master => {
      console.log(`   - ${master.firstName} ${master.lastName}: ${master.email} / ${master.password}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = { main };