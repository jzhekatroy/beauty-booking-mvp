const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function checkUser() {
  try {
    const email = process.argv[2] || 'melkiy63@yandex.ru';
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}`);
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { email },
      include: { team: true }
    });
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
    console.log(`   ID: ${user.id}`);
    console.log(`   Email: ${user.email}`);
    console.log(`   Role: ${user.role}`);
    console.log(`   Team: ${user.team?.name} (${user.team?.teamNumber})`);
    console.log(`   Created: ${user.createdAt}`);
    console.log(`   Updated: ${user.updatedAt}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const testPassword = process.argv[3] || 'rootpasswd';
    const isPasswordValid = bcrypt.compareSync(testPassword, user.password);
    
    console.log(`üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è "${testPassword}": ${isPasswordValid ? '‚úÖ –í–∞–ª–∏–¥–Ω—ã–π' : '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π'}`);
    
    if (!isPasswordValid) {
      console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–æ–ª–∏:');
      const passwords = ['password', 'admin123', 'rootpasswd', 'melkiy63'];
      for (const pwd of passwords) {
        const isValid = bcrypt.compareSync(pwd, user.password);
        console.log(`   "${pwd}": ${isValid ? '‚úÖ' : '‚ùå'}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkUser();
