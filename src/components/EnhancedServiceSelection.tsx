'use client'

import React, { useState, useMemo } from 'react'
import { Search, Clock, DollarSign, Check, X, ArrowRight } from 'lucide-react'
import { Service, ServiceGroup } from '@/types/booking'
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Checkbox } from '@/components/ui/checkbox'
import { cn } from '@/lib/utils'

interface EnhancedServiceSelectionProps {
  serviceGroups: ServiceGroup[];
  selectedServices: Service[];
  onServiceSelect: (services: Service[]) => void;
  onNext?: () => void;
  className?: string;
}

// –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π UI: –±–µ–∑ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –≤–∏–¥–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ü–µ–Ω–µ

export function EnhancedServiceSelection({
  serviceGroups,
  selectedServices,
  onServiceSelect,
  onNext,
  className = ''
}: EnhancedServiceSelectionProps) {
  console.log('üîç EnhancedServiceSelection: render with props:', {
    serviceGroups: serviceGroups?.length,
    selectedServices: selectedServices?.length,
    onNext: !!onNext
  });
  
  const [searchQuery, setSearchQuery] = useState('');
  // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –≤–∏–¥–∞ –∏ —Ñ–∏–ª—å—Ç—Ä —Ü–µ–Ω—ã —É–±—Ä–∞–Ω—ã

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ –∏–∑ –≥—Ä—É–ø–ø
  const allServices = useMemo(() => {
    if (!serviceGroups || !Array.isArray(serviceGroups)) {
      return [];
    }
    return serviceGroups.flatMap(group => {
      if (!group.services || !Array.isArray(group.services)) {
        return [];
      }
      return group.services.map(service => ({
        ...service,
        description: service.description || '',
        image: service.photoUrl || service.image
      }));
    });
  }, [serviceGroups]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É—Å–ª—É–≥
  const filteredServices = useMemo(() => {
    let filtered = allServices;

    // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é
    if (searchQuery) {
      filtered = filtered.filter(service => 
        service.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        service.description.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }
    return filtered;
  }, [allServices, searchQuery]);

  // –í—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥
  const totalPrice = useMemo(
    () => selectedServices.reduce((sum, service) => sum + service.price, 0),
    [selectedServices]
  );

  const totalDuration = useMemo(
    () => selectedServices.reduce((sum, service) => sum + service.duration, 0),
    [selectedServices]
  );

  const toggleService = (service: Service) => {
    const isSelected = selectedServices.some(s => s.id === service.id);
    console.log('üîç toggleService:', { service: service.name, isSelected });
    
    if (isSelected) {
      onServiceSelect(selectedServices.filter(s => s.id !== service.id));
    } else {
      onServiceSelect([...selectedServices, service]);
    }
  };

  const formatDuration = (minutes: number) => {
    if (minutes < 60) return `${minutes} –º–∏–Ω`;
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return mins > 0 ? `${hours}—á ${mins}–º` : `${hours}—á`;
  };

  const formatCurrency = (value: number) => {
    try {
      return new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB', maximumFractionDigits: 0 }).format(value || 0)
    } catch {
      return `${Math.round(value || 0).toLocaleString('ru-RU')} ‚ÇΩ`
    }
  }

  const getHueFromString = (str: string) => {
    let hash = 0
    for (let i = 0; i < str.length; i++) {
      hash = (hash << 5) - hash + str.charCodeAt(i)
      hash |= 0
    }
    return Math.abs(hash) % 360
  }

  const ServiceCard = ({ service }: { service: Service }) => {
    const isSelected = selectedServices.some(s => s.id === service.id);
    const imageUrl = service.image || service.photoUrl;
 
    const hue = getHueFromString(service.id || service.name || 'service')
    const fallbackGradient = `linear-gradient(135deg, hsl(${hue} 70% 70%), hsl(${(hue + 30) % 360} 70% 55%))`

    return (
      <div
        onClick={() => toggleService(service)}
        className={`relative cursor-pointer transition-all duration-300 rounded-2xl border overflow-hidden ${isSelected ? 'border-[#f59e0b] shadow-lg' : 'border-gray-200 hover:border-gray-300'}`}
      >
        {/* –§–æ–Ω: —Ñ–æ—Ç–æ –∏–ª–∏ —Ç—ë–ø–ª—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç */}
        <div
          className="relative w-full"
          style={{ paddingTop: '56.25%' }}
        >
          <div
            className="absolute inset-0 w-full h-full"
            style={{
              backgroundImage: imageUrl ? `url(${imageUrl})` : fallbackGradient,
              backgroundSize: 'cover',
              backgroundPosition: 'center'
            }}
          />
          {/* –í–µ—Ä—Ö–Ω–∏–µ —á–∏–ø—Å—ã: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Ü–µ–Ω–∞ */}
          <div className="absolute top-2 left-2 flex items-center gap-2">
            <span className="px-2 py-1 rounded-full text-xs bg-white/90 text-gray-800 shadow flex items-center gap-1">
              <Clock className="w-3.5 h-3.5" /> {formatDuration(service.duration)}
            </span>
          </div>
          <div className="absolute top-2 right-2 px-2 py-1 rounded-full text-xs bg-white/90 text-[#b45309] font-semibold shadow">
            {formatCurrency(Number(service.price))}
          </div>
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ */}
          <div className={`absolute bottom-2 right-2 rounded-full p-1.5 shadow ${isSelected ? 'bg-[#f59e0b] text-white' : 'bg-white/90 text-gray-600'}`}>
            <Check className="w-4 h-4" />
          </div>
          {/* –ù–∏–∑: –≥—Ä–∞–¥–∏–µ–Ω—Ç + —Ç–µ–∫—Å—Ç */}
          <div className="absolute inset-x-0 bottom-0 p-3 bg-gradient-to-t from-black/60 via-black/30 to-transparent">
            <h3 className="font-semibold text-white text-base mb-1 line-clamp-2">{service.name}</h3>
            {service.description && (
              <p className="text-[13px] leading-snug text-gray-100 line-clamp-2">{service.description}</p>
            )}
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className={`space-y-6 ${className}`}>
      {/* –ü–æ–∏—Å–∫ */}
      <div className="space-y-4">
        {/* –ü–æ–∏—Å–∫ */}
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ —É—Å–ª—É–≥..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-[#00acf4] focus:border-transparent transition-all"
          />
        </div>

        {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∏–¥–∞ —É–¥–∞–ª–µ–Ω—ã */}
      </div>

      {/* –£—Å–ª—É–≥–∏ ‚Äî –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–µ—Ç–∫–∞ */}
      <div className="grid gap-4 grid-cols-1 sm:grid-cols-2">
        {filteredServices.map((service) => (
          <ServiceCard key={service.id} service={service} />
        ))}
      </div>

      {filteredServices.length === 0 && (
        <div className="text-center py-12">
          <div className="text-gray-400 text-lg mb-2">–£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
          <p className="text-gray-500">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
        </div>
      )}

      {/* –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –∫–Ω–æ–ø–∫–∏ */}
      {selectedServices.length > 0 && (
        <div className="bg-white/90 backdrop-blur-lg rounded-2xl p-4 border border-gray-200 shadow-lg">
          <div className="flex justify-between items-center mb-4">
            <div>
              <div className="text-sm text-gray-600">
                –í—ã–±—Ä–∞–Ω–æ —É—Å–ª—É–≥: {selectedServices.length}
              </div>
              <div className="flex items-center gap-4 text-sm">
                <span className="flex items-center gap-1">
                  <Clock className="w-4 h-4 text-gray-500" />
                  {formatDuration(totalDuration)}
                </span>
                <span className="font-semibold text-[#f59e0b]">
                  {formatCurrency(Number(totalPrice))}
                </span>
              </div>
            </div>
            
            <button
              onClick={() => onServiceSelect([])}
              className="p-2 text-gray-400 hover:text-red-500 transition-colors"
              title="–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
          
          {/* –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" */}
          {onNext && (
            <div className="flex justify-end">
              <button
                onClick={() => {
                  console.log('üîç EnhancedServiceSelection: onNext clicked');
                  onNext();
                }}
                className="bg-[#f59e0b] hover:bg-[#ea580c] text-white px-6 py-2 rounded-lg font-medium transition-colors flex items-center gap-2"
              >
                <span>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</span>
                <ArrowRight className="w-4 h-4" />
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  );
}
